;	Fibonnaci iterative

_moduleOne:	loadi R7 one 	; R7 = 1 (constant)

	loadi R0 IO				; Input from user

	loadi R1 zero 			; Init values
	loadi R2 zero 			;
	loadi R3 one 			;

	jmpz R0 _finish			; Jump to finish and print 0 if input = 0

_loopFib:	move R4 R2		; R4 = aux
	add R2 R3				; Sum last number to current
	move R3 R4				; Copy last from aux

	add R1 R7				; Count
	sgt R5 R0 R1			; Check branch cond

	jmpp R5 _loopFib		; Branch to loop or not

_finish:	storei R2 IO	; Output fibonacci number

	.extern _moduleZero		;