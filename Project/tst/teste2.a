loadi R1 IO ;					R1 armazena A
loadi R2 IO	;					R2 armazena B
loadi R3 IO	;					R3 armazena C
loadi R4 IO	;					R4 armazena x
_new: move R5 R4 ;				R5 calcula Ax^2
multiply R5 R5 ;
multiply R5 R1 ;
multiply R4 R2 ;				R4 calcula Ax^2 + Bx + C
add R4 R3 ;
add R4 R5 ;
moveSp -2 ;						Imprime e armazena o resultado da equacao
storeSp R4 0 ;
storei R4 IO ;
addi R0 2 ;						R0 armazena o deslocamento do ponteiro da pilha
loadi R4 IO ;					Recebe o novo x e, caso seja nao nulo, reinicia
jmpp R4 _new ;						o calculo
jmpn R4 _new ;
jump _order ;
_continueOrder: move R1 R0 ;	Em passadas posteriores a primeira, retorna o
addi R1 -2 ;						ponteiro da pilha para a posicao do momento
_continueOrderLoop: moveSp -2 ;		em que a ordenacao comeca
addi R1 -2 ;
jmpp R1 _continueOrderLoop ;	Enquanto sp nao estiver pronto, sp -= 2
_order: move R1 R0 ;			R1 indica a qntde de bytes da pilha percorridos
loadc R2 1 ;					R2 indica se a pilha esta ordenada
_orderLoop: loadSp R3 0 ;		A pilha comeca a ser percorrida e ordenada, dois
loadSp R4 2 ;						valores seguidos sao carregados da pilha
clear R5 ;
slt R5 R4 R3 ;
jmpz R5 _nextStage ;			Se R5 = 0, os valores carregados estao em ordem
clear R2 ;						Caso contrario R2 eh alterado e os valores sao
storeSp R3 2 ;						ordenados na pilha
storeSp R4 0 ;
_nextStage: moveSp 2 ;			Sp eh preparado para proxima leitura
addi R1 -2 ;
loadc R3 3 ;
clear R4 ;
sgt R4 R1 R3 ;					Verifica se R1 <= 2, pois o loop deve parar no
jmpp R4 _orderLoop ;				no penultimo item da pilha
jmpz R2 _continueOrder ;		Se a pilha foi totalmente percorrida e ainda
move R1 R0 ;						assim nao estiver em ordem, o loop continua
_resetSP: move R1 R0 ;			Retorna o ponteiro da pilha para a posicao do
addi R1 -2 ;						momento em que a ordenacao comeca
_continueResetSp: moveSp -2 ;
addi R1 -2 ;
jmpp R1 _continueResetSp ;
_printSp: move R1 R0 ;			A pilha eh percorrida para impressao
loadSp R2 0 ;
storei R2 IO ;
moveSp 2 ;
addi R1 -2 ;
jmpp R1 _printSp ;
exit ;
