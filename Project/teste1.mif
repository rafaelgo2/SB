DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00 : 00001000;              -- loadi R0 IO ;   R0 representa a qntde de fatoriais a serem calculados
01 : 11111110;              -- 
02 : 01110001;              -- clear R1 ;    R1 representa a qntde de fatoriais ja calculados
03 : 00000000;              -- 
04 : 00001010;              -- _new: loadi R2 IO ;  R2 eh o inteiro cujo fatorial sera calculado
05 : 11111110;              -- 
06 : 01001010;              -- jmpn R2_new ;   Se a entrada for negativa, a ignora
07 : 00000100;              -- 
08 : 01110011;              -- clear R3 ;
09 : 00000000;              -- 
0A : 01101100;              -- loadc R4 8 ;
0B : 00001000;              -- 
0C : 10000011;              -- slt R3 R2 R4 ;   Verifica se a entrada eh maior ou igual a 8
0D : 01010000;              -- 
0E : 01000011;              -- jmpz R3_new ;   Se for, a ignora
0F : 00000100;              -- 
10 : 00101011;              -- _loop: multiply R3 R2 ; Loop que multiplica resultado parcial (R3, inicialmente
11 : 01000000;              -- 
12 : 10111010;              -- addi R2-1 ;    igual a 1) pelo proximo fator
13 : 11111111;              -- 
14 : 11010010;              -- jmpp R2_loop ;   Enquanto o proximo fator for > 0, o fatorial ainda nao
15 : 00010000;              -- 
16 : 00010011;              -- storei R3 IO ;    esta pronto
17 : 11111110;              -- 
18 : 10111001;              -- addi R1 1 ;
19 : 00000001;              -- 
1A : 11001010;              -- seq R2 R0 R1 ;
1B : 00000100;              -- 
1C : 01000010;              -- jmpz R2_new ;   Se R2 == 0, entao R0 != R1 e ainda ha fatoriais a serem
1D : 00000100;              -- 
[1E..FF] : 00000000;              -- 
END;
