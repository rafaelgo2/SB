DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  01101000;              -- loadc R0 0
01        :  00000000;              -- 
02        :  00001001;              -- loadi R1 IO
03        :  11111110;              -- 
04        :  00001010;              -- loadi R2 IO
05        :  11111110;              -- 
06        :  00001011;              -- loadi R3 IO
07        :  11111110;              -- 
08        :  00001100;              -- loadi R4 IO
09        :  11111110;              -- 
0A        :  01010101;              -- _new: move R5 R4
0B        :  10000000;              -- 
0C        :  00101101;              -- multiply R5 R5
0D        :  10100000;              -- 
0E        :  00101101;              -- multiply R5 R1
0F        :  00100000;              -- 
10        :  01010110;              -- move R6 R4
11        :  10000000;              -- 
12        :  00101110;              -- multiply R6 R2
13        :  01000000;              -- 
14        :  01010111;              -- move R7 R3
15        :  01100000;              -- 
16        :  00011111;              -- add R7 R6
17        :  11000000;              -- 
18        :  00011111;              -- add R7 R5
19        :  10100000;              -- 
1A        :  01111000;              -- moveSp -2
1B        :  11111110;              -- 
1C        :  10011111;              -- storeSp R7 0
1D        :  00000000;              -- 
1E        :  00010111;              -- storei R7 IO
1F        :  11111110;              -- 
20        :  01101100;              -- loadc R4 2
21        :  00000010;              -- 
22        :  00011000;              -- add R0 R4
23        :  10000000;              -- 
24        :  00001100;              -- loadi R4 IO
25        :  11111110;              -- 
26        :  11010100;              -- jmpp R4_new
27        :  00001010;              -- 
28        :  01001100;              -- jmpn R4_new
29        :  00001010;              -- 
[2A..2B]:  00111000;              -- 
2C        :  01010001;              -- _continueOrder: move R1 R0
2D        :  00000000;              -- 
2E        :  01101010;              -- loadc R2-2
2F        :  11111110;              -- 
30        :  00011001;              -- add R1 R2
31        :  01000000;              -- 
32        :  01111000;              -- _continueLoop: moveSp -2
33        :  11111110;              -- 
34        :  00011001;              -- add R1 R2
35        :  01000000;              -- 
36        :  11010001;              -- jmpp R1_continueLoop
37        :  00110010;              -- 
38        :  01010001;              -- _order: move R1 R0
39        :  00000000;              -- 
3A        :  01101010;              -- loadc R2 0
3B        :  00000000;              -- 
3C        :  10010011;              -- _orderLoop: loadSp R3 0
3D        :  00000000;              -- 
3E        :  10010100;              -- loadSp R4 2
3F        :  00000010;              -- 
40        :  01010101;              -- move R5 R3
41        :  01100000;              -- 
42        :  00100101;              -- subtract R5 R4
43        :  10000000;              -- 
44        :  11010101;              -- jmpp R5_nextStage
45        :  01001100;              -- 
46        :  01101010;              -- loadc R2 1
47        :  00000001;              -- 
48        :  10011011;              -- storeSp R3 2
49        :  00000010;              -- 
4A        :  10011100;              -- storeSp R4 0
4B        :  00000000;              -- 
4C        :  01111000;              -- _nextStage: moveSp 2
4D        :  00000010;              -- 
4E        :  01101101;              -- loadc R5-2
4F        :  11111110;              -- 
50        :  00011001;              -- add R1 R5
51        :  10100000;              -- 
52        :  00011101;              -- add R5 R1
53        :  00100000;              -- 
54        :  11010101;              -- jmpp R5_orderLoop
55        :  00111100;              -- 
56        :  11010010;              -- jmpp R2_continueOrder
57        :  00101100;              -- 
58        :  01010001;              -- move R1 R0
59        :  00000000;              -- 
5A        :  01101010;              -- loadc R2-2
5B        :  11111110;              -- 
5C        :  10010011;              -- _printSp: loadSp R3 0
5D        :  00000000;              -- 
5E        :  00010011;              -- storei R3 IO
5F        :  11111110;              -- 
60        :  01111000;              -- moveSp -2
61        :  11111110;              -- 
62        :  00011001;              -- add R1 R2
63        :  01000000;              -- 
64        :  11010001;              -- jmpp R1_printSp ; Deve ter bug aqui
65        :  01011100;              -- 
[66..FF]:  00000000;              -- 
END;
