DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  01110000;              -- clear R0
01        :  00000000;              -- 
02        :  00001001;              -- loadi R1 IO
03        :  11111110;              -- 
04        :  00001010;              -- loadi R2 IO
05        :  11111110;              -- 
06        :  00001011;              -- loadi R3 IO
07        :  11111110;              -- 
08        :  00001100;              -- loadi R4 IO
09        :  11111110;              -- 
0A        :  01010101;              -- _new: move R5 R4
0B        :  10000000;              -- 
0C        :  00101101;              -- multiply R5 R5
0D        :  10100000;              -- 
0E        :  00101101;              -- multiply R5 R1
0F        :  00100000;              -- 
10        :  00101100;              -- multiply R4 R2
11        :  01000000;              -- 
12        :  00011100;              -- add R4 R3
13        :  01100000;              -- 
14        :  00011100;              -- add R4 R5
15        :  10100000;              -- 
16        :  01111000;              -- moveSp -2
17        :  11111110;              -- 
18        :  10011100;              -- storeSp R4 0
19        :  00000000;              -- 
1A        :  00010100;              -- storei R4 IO
1B        :  11111110;              -- 
1C        :  10111000;              -- addi R0 2
1D        :  00000010;              -- 
1E        :  00001100;              -- loadi R4 IO
1F        :  11111110;              -- 
20        :  11010100;              -- jmpp R4_new
21        :  00001010;              -- 
22        :  01001100;              -- jmpn R4_new
23        :  00001010;              -- 
24        :  00111000;              -- jump _order
25        :  00110000;              -- 
26        :  01010001;              -- _continueOrder: move R1 R0
27        :  00000000;              -- 
28        :  10111001;              -- addi R1-2
29        :  11111110;              -- 
2A        :  01111000;              -- _continueOrderLoop: moveSp -2
2B        :  11111110;              -- 
2C        :  10111001;              -- addi R1-2
2D        :  11111110;              -- 
2E        :  11010001;              -- jmpp R1_continueOrderLoop
2F        :  00101010;              -- 
30        :  01010001;              -- _order: move R1 R0
31        :  00000000;              -- 
32        :  01101010;              -- loadc R2 1 ;                     Sinal que indica se a pilha esta ordenada
33        :  00000001;              -- 
34        :  10010011;              -- _orderLoop: loadSp R3 0
35        :  00000000;              -- 
36        :  10010100;              -- loadSp R4 2
37        :  00000010;              -- 
38        :  01110101;              -- clear R5
39        :  00000000;              -- 
3A        :  11000101;              -- sgt R5 R4 R3
3B        :  10001100;              -- 
3C        :  01000101;              -- jmpz R5_nextStage
3D        :  01000100;              -- 
3E        :  01110010;              -- clear R2
3F        :  00000000;              -- 
40        :  10011011;              -- storeSp R3 2
41        :  00000010;              -- 
42        :  10011100;              -- storeSp R4 0
43        :  00000000;              -- 
44        :  01111000;              -- _nextStage: moveSp 2
45        :  00000010;              -- 
46        :  10111001;              -- addi R1-2
47        :  11111110;              -- 
48        :  01101011;              -- loadc R3 3
49        :  00000011;              -- 
4A        :  01110100;              -- clear R4
4B        :  00000000;              -- 
4C        :  11000100;              -- sgt R4 R1 R3
4D        :  00101100;              -- 
4E        :  11010100;              -- jmpp R4_orderLoop
4F        :  00110100;              -- 
50        :  01000010;              -- jmpz R2_continueOrder
51        :  00100110;              -- 
52        :  01010001;              -- move R1 R0
53        :  00000000;              -- 
54        :  10010010;              -- _printSp: loadSp R2 0
55        :  00000000;              -- 
56        :  00010010;              -- storei R2 IO
57        :  11111110;              -- 
58        :  01111000;              -- moveSp -2
59        :  11111110;              -- 
5A        :  10111001;              -- addi R1-2
5B        :  11111110;              -- 
5C        :  11010001;              -- jmpp R1_printSp
5D        :  01010100;              -- 
[5E..F2]:  00000000;              -- 
F3        :  00111100;              -- 
F4        :  00000000;              -- 
F5        :  00111010;              -- 
F6        :  00000000;              -- 
F7        :  00110100;              -- 
F8        :  00000000;              -- 
F9        :  00101010;              -- 
FA        :  00000000;              -- 
FB        :  00011100;              -- 
FC        :  11111110;              -- 
FD        :  10110100;              -- 
[FE..FF]:  00000000;              -- 
END;
