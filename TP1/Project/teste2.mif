DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00 : 00001001;              -- loadi R1 IO ;     R1 armazena A
01 : 11111110;              -- 
02 : 00001010;              -- loadi R2 IO ;     R2 armazena B
03 : 11111110;              -- 
04 : 00001011;              -- loadi R3 IO ;     R3 armazena C
05 : 11111110;              -- 
06 : 00001100;              -- loadi R4 IO ;     R4 armazena x
07 : 11111110;              -- 
08 : 01010101;              -- _new: move R5 R4 ;    R5 calcula Ax^2
09 : 10000000;              -- 
0A : 00101101;              -- multiply R5 R5 ;
0B : 10100000;              -- 
0C : 00101101;              -- multiply R5 R1 ;
0D : 00100000;              -- 
0E : 00101100;              -- multiply R4 R2 ;    R4 calcula Ax^2 + Bx + C
0F : 01000000;              -- 
10 : 00011100;              -- add R4 R3 ;
11 : 01100000;              -- 
12 : 00011100;              -- add R4 R5 ;
13 : 10100000;              -- 
14 : 01111000;              -- moveSp -2 ;      Imprime e armazena o resultado da equacao
15 : 11111110;              -- 
16 : 10011100;              -- storeSp R4 0 ;
17 : 00000000;              -- 
18 : 00010100;              -- storei R4 IO ;
19 : 11111110;              -- 
1A : 10111000;              -- addi R0 2 ;      R0 armazena o deslocamento do ponteiro da pilha
1B : 00000010;              -- 
1C : 00001100;              -- loadi R4 IO ;     Recebe o novo x e, caso seja nao nulo, reinicia
1D : 11111110;              -- 
1E : 11010100;              -- jmpp R4_new ;      o calculo
1F : 00001000;              -- 
20 : 01001100;              -- jmpn R4_new ;
21 : 00001000;              -- 
22 : 00111000;              -- jump _order ;
23 : 00101110;              -- 
24 : 01010001;              -- _continueOrder: move R1 R0 ; Em passadas posteriores a primeira, retorna o
25 : 00000000;              -- 
26 : 10111001;              -- addi R1-2 ;      ponteiro da pilha para a posicao do momento
27 : 11111110;              -- 
28 : 01111000;              -- _continueOrderLoop: moveSp -2 ;  em que a ordenacao comeca
29 : 11111110;              -- 
2A : 10111001;              -- addi R1-2 ;
2B : 11111110;              -- 
2C : 11010001;              -- jmpp R1_continueOrderLoop ; Enquanto sp nao estiver pronto, sp -= 2
2D : 00101000;              -- 
2E : 01010001;              -- _order: move R1 R0 ;   R1 indica a qntde de bytes da pilha percorridos
2F : 00000000;              -- 
30 : 01101010;              -- loadc R2 1 ;     R2 indica se a pilha esta ordenada
31 : 00000001;              -- 
32 : 10010011;              -- _orderLoop: loadSp R3 0 ;  A pilha comeca a ser percorrida e ordenada, dois
33 : 00000000;              -- 
34 : 10010100;              -- loadSp R4 2 ;      valores seguidos sao carregados da pilha
35 : 00000010;              -- 
36 : 01110101;              -- clear R5 ;
37 : 00000000;              -- 
38 : 10000101;              -- slt R5 R4 R3 ;
39 : 10001100;              -- 
3A : 01000101;              -- jmpz R5_nextStage ;   Se R5 = 0, os valores carregados estao em ordem
3B : 01000010;              -- 
3C : 01110010;              -- clear R2 ;      Caso contrario R2 eh alterado e os valores sao
3D : 00000000;              -- 
3E : 10011011;              -- storeSp R3 2 ;      ordenados na pilha
3F : 00000010;              -- 
40 : 10011100;              -- storeSp R4 0 ;
41 : 00000000;              -- 
42 : 01111000;              -- _nextStage: moveSp 2 ;   Sp eh preparado para proxima leitura
43 : 00000010;              -- 
44 : 10111001;              -- addi R1-2 ;
45 : 11111110;              -- 
46 : 01101011;              -- loadc R3 3 ;
47 : 00000011;              -- 
48 : 01110100;              -- clear R4 ;
49 : 00000000;              -- 
4A : 11000100;              -- sgt R4 R1 R3 ;     Verifica se R1 <= 2, pois o loop deve parar no
4B : 00101100;              -- 
4C : 11010100;              -- jmpp R4_orderLoop ;    no penultimo item da pilha
4D : 00110010;              -- 
4E : 01000010;              -- jmpz R2_continueOrder ;  Se a pilha foi totalmente percorrida e ainda
4F : 00100100;              -- 
50 : 01010001;              -- move R1 R0 ;      assim nao estiver em ordem, o loop continua
51 : 00000000;              -- 
52 : 01010001;              -- _resetSP: move R1 R0 ;   Retorna o ponteiro da pilha para a posicao do
53 : 00000000;              -- 
54 : 10111001;              -- addi R1-2 ;      momento em que a ordenacao comeca
55 : 11111110;              -- 
56 : 01111000;              -- _continueResetSp: moveSp -2 ;
57 : 11111110;              -- 
58 : 10111001;              -- addi R1-2 ;
59 : 11111110;              -- 
5A : 11010001;              -- jmpp R1_continueResetSp ;
5B : 01010110;              -- 
5C : 01010001;              -- move R1 R0 ;
5D : 00000000;              -- 
5E : 10010010;              -- _printSp: loadSp R2 0 ;   A pilha eh percorrida para impressao
5F : 00000000;              -- 
60 : 00010010;              -- storei R2 IO ;
61 : 11111110;              -- 
62 : 01111000;              -- moveSp 2 ;
63 : 00000010;              -- 
64 : 10111001;              -- addi R1-2 ;
65 : 11111110;              -- 
66 : 11010001;              -- jmpp R1_printSp ;
67 : 01011110;              -- 
[68..FF] :  00000000;              -- 
END;
