DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  01101110;              -- loadc R6-1 ;
01        :  11111111;              -- 
02        :  01111000;              -- moveSp -2 ;
03        :  11111110;              -- 
04        :  10011110;              -- storeSp R6 0 ; //Marcador de Fundo de Pilha
05        :  00000000;              -- 
06        :  10001000;              -- call _initR ;
07        :  00001100;              -- 
08        :  10001000;              -- call _initS ;
09        :  00011100;              -- 
[0A..0B]:  00000000;              -- 
0C        :  00001000;              -- _initR: loadi R0 IO ;
0D        :  11111110;              -- 
0E        :  01010001;              -- move R1 R0 ;
0F        :  00000000;              -- 
10        :  00100001;              -- subtract R1 R6 ;
11        :  11000000;              -- 
12        :  01000001;              -- jmpz R1_endR ;
13        :  00011010;              -- 
14        :  01111000;              -- moveSp -2 ;
15        :  11111110;              -- 
16        :  10011000;              -- storeSp R0 0 ;
17        :  00000000;              -- 
18        :  00111000;              -- jump _initR ;
19        :  00001100;              -- 
1A        :  10100000;              -- _endR: ret  ;
1B        :  00000000;              -- 
1C        :  00001000;              -- _initS: loadi R0 IO ;
1D        :  11111110;              -- 
1E        :  10010011;              -- _while: loadSp R3 0 ; //Enquanto R3 diferente de -1
1F        :  00000000;              -- 
20        :  01010100;              -- move R4 R3 ;
21        :  01100000;              -- 
22        :  00100100;              -- subtract R4 R6 ;
23        :  11000000;              -- 
24        :  01000100;              -- jmpz R4_endWhile ;
25        :  00110000;              -- 
26        :  01010100;              -- move R4 R3 ;
27        :  01100000;              -- 
28        :  00100100;              -- subtract R4 R0 ;
29        :  00000000;              -- 
2A        :  01000100;              -- jmpz R4_endWhile ; //Se Topo da Pilha igual ao IO
2B        :  00110000;              -- 
2C        :  01111000;              -- moveSp 2 ;//Desce a pilha
2D        :  00000010;              -- 
2E        :  00111000;              -- jump _while ;
2F        :  00011110;              -- 
30        :  00010011;              -- _endWhile: storei R3 IO ; //Escreva o valor encontrado
31        :  11111110;              -- 
32        :  10100000;              -- _endS: ret  ;
[33..FF]:  00000000;              -- 
END;
