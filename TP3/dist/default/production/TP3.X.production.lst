

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Jan 22 20:23:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F777
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 1.40
    60                           ; Generated 01/12/2016 GMT
    61                           ; 
    62                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F777 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0013                     	;# 
   114  0014                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  0081                     	;# 
   129  0085                     	;# 
   130  0086                     	;# 
   131  0087                     	;# 
   132  0088                     	;# 
   133  0089                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  008F                     	;# 
   138  0090                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0095                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  0105                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  008F                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  0105                     	;# 
   223  0109                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0008                     	;# 
   238  0009                     	;# 
   239  000A                     	;# 
   240  000B                     	;# 
   241  000C                     	;# 
   242  000D                     	;# 
   243  000E                     	;# 
   244  000E                     	;# 
   245  000F                     	;# 
   246  0010                     	;# 
   247  0011                     	;# 
   248  0012                     	;# 
   249  0013                     	;# 
   250  0014                     	;# 
   251  0015                     	;# 
   252  0015                     	;# 
   253  0016                     	;# 
   254  0017                     	;# 
   255  0018                     	;# 
   256  0019                     	;# 
   257  001A                     	;# 
   258  001B                     	;# 
   259  001B                     	;# 
   260  001C                     	;# 
   261  001D                     	;# 
   262  001E                     	;# 
   263  001F                     	;# 
   264  0081                     	;# 
   265  0085                     	;# 
   266  0086                     	;# 
   267  0087                     	;# 
   268  0088                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0109                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  018C                     	;# 
   297  0000                     	;# 
   298  0001                     	;# 
   299  0002                     	;# 
   300  0003                     	;# 
   301  0004                     	;# 
   302  0005                     	;# 
   303  0006                     	;# 
   304  0007                     	;# 
   305  0008                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0088                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  0105                     	;# 
   359  0109                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  018C                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  000E                     	;# 
   381  000F                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  001D                     	;# 
   398  001E                     	;# 
   399  001F                     	;# 
   400  0081                     	;# 
   401  0085                     	;# 
   402  0086                     	;# 
   403  0087                     	;# 
   404  0088                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0098                     	;# 
   420  0099                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0109                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  010F                     	;# 
   432  018C                     	;# 
   433  0000                     	;# 
   434  0001                     	;# 
   435  0002                     	;# 
   436  0003                     	;# 
   437  0004                     	;# 
   438  0005                     	;# 
   439  0006                     	;# 
   440  0007                     	;# 
   441  0008                     	;# 
   442  0009                     	;# 
   443  000A                     	;# 
   444  000B                     	;# 
   445  000C                     	;# 
   446  000D                     	;# 
   447  000E                     	;# 
   448  000E                     	;# 
   449  000F                     	;# 
   450  0010                     	;# 
   451  0011                     	;# 
   452  0012                     	;# 
   453  0013                     	;# 
   454  0014                     	;# 
   455  0015                     	;# 
   456  0015                     	;# 
   457  0016                     	;# 
   458  0017                     	;# 
   459  0018                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001B                     	;# 
   464  001C                     	;# 
   465  001D                     	;# 
   466  001E                     	;# 
   467  001F                     	;# 
   468  0081                     	;# 
   469  0085                     	;# 
   470  0086                     	;# 
   471  0087                     	;# 
   472  0088                     	;# 
   473  0089                     	;# 
   474  008C                     	;# 
   475  008D                     	;# 
   476  008E                     	;# 
   477  008F                     	;# 
   478  0090                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0094                     	;# 
   483  0095                     	;# 
   484  0095                     	;# 
   485  0096                     	;# 
   486  0097                     	;# 
   487  0098                     	;# 
   488  0099                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  009F                     	;# 
   494  0105                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010D                     	;# 
   498  010E                     	;# 
   499  010F                     	;# 
   500  018C                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  000E                     	;# 
   517  000F                     	;# 
   518  0010                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0013                     	;# 
   522  0014                     	;# 
   523  0015                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0017                     	;# 
   527  0018                     	;# 
   528  0019                     	;# 
   529  001A                     	;# 
   530  001B                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  001D                     	;# 
   534  001E                     	;# 
   535  001F                     	;# 
   536  0081                     	;# 
   537  0085                     	;# 
   538  0086                     	;# 
   539  0087                     	;# 
   540  0088                     	;# 
   541  0089                     	;# 
   542  008C                     	;# 
   543  008D                     	;# 
   544  008E                     	;# 
   545  008F                     	;# 
   546  0090                     	;# 
   547  0091                     	;# 
   548  0092                     	;# 
   549  0093                     	;# 
   550  0094                     	;# 
   551  0095                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  0105                     	;# 
   563  0109                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  010F                     	;# 
   568  018C                     	;# 
   569                           
   570                           	psect	idataBANK0
   571  0D7B                     __pidataBANK0:	
   572                           
   573                           ;initializer for _randx
   574  0D7B  3401               	retlw	1
   575  0D7C  3400               	retlw	0
   576  0D7D  3400               	retlw	0
   577  0D7E  3400               	retlw	0
   578                           
   579                           	psect	idataBANK1
   580  0055                     __pidataBANK1:	
   581                           
   582                           ;initializer for main@F1498
   583  0055  3420               	retlw	32
   584  0056  3420               	retlw	32
   585  0057  3420               	retlw	32
   586  0058  3470               	retlw	112
   587  0059  346F               	retlw	111
   588  005A  346E               	retlw	110
   589  005B  3474               	retlw	116
   590  005C  346F               	retlw	111
   591  005D  3473               	retlw	115
   592  005E  3421               	retlw	33
   593  005F  3420               	retlw	32
   594  0060  3452               	retlw	82
   595  0061  3442               	retlw	66
   596  0062  3431               	retlw	49
   597  0063  3400               	retlw	0
   598  0064  3400               	retlw	0
   599  0006                     _PORTBbits	set	6
   600  0007                     _PORTCbits	set	7
   601  0008                     _PORTD	set	8
   602  0009                     _PORTEbits	set	9
   603  009F                     _ADCON1	set	159
   604  0085                     _TRISA	set	133
   605  0086                     _TRISB	set	134
   606  0087                     _TRISC	set	135
   607  0087                     _TRISCbits	set	135
   608  0088                     _TRISD	set	136
   609  0089                     _TRISE	set	137
   610                           
   611                           	psect	strings
   612  0003                     __pstrings:	
   613  0003                     stringtab:	
   614  0003                     __stringtab:	
   615                           
   616                           ;	String table - string pointers are 1 byte each
   617  0003  1BFF               	btfsc	btemp+1,7
   618  0004  280D               	ljmp	stringcode
   619  0005  1383               	bcf	3,7
   620  0006  187F               	btfsc	btemp+1,0
   621  0007  1783               	bsf	3,7
   622  0008  0800               	movf	0,w
   623  0009  0A84               	incf	4,f
   624  000A  1903               	skipnz
   625  000B  0AFF               	incf	btemp+1,f
   626  000C  0008               	return
   627  000D                     stringcode:	
   628  000D                     stringdir:	
   629  000D  3000               	movlw	high stringdir
   630  000E  008A               	movwf	10
   631  000F  0804               	movf	4,w
   632  0010  0A84               	incf	4,f
   633  0011  0782               	addwf	2,f
   634  0012                     __stringbase:	
   635  0012  3400               	retlw	0
   636  0013                     __end_of__stringtab:	
   637  0013                     STR_5:	
   638  0013  3454               	retlw	84	;'T'
   639  0014  3465               	retlw	101	;'e'
   640  0015  346E               	retlw	110	;'n'
   641  0016  3474               	retlw	116	;'t'
   642  0017  3465               	retlw	101	;'e'
   643  0018  3420               	retlw	32	;' '
   644  0019  346E               	retlw	110	;'n'
   645  001A  346F               	retlw	111	;'o'
   646  001B  3476               	retlw	118	;'v'
   647  001C  3461               	retlw	97	;'a'
   648  001D  346D               	retlw	109	;'m'
   649  001E  3465               	retlw	101	;'e'
   650  001F  346E               	retlw	110	;'n'
   651  0020  3474               	retlw	116	;'t'
   652  0021  3465               	retlw	101	;'e'
   653  0022  3400               	retlw	0
   654  0023                     STR_2:	
   655  0023  3450               	retlw	80	;'P'
   656  0024  3461               	retlw	97	;'a'
   657  0025  3472               	retlw	114	;'r'
   658  0026  3461               	retlw	97	;'a'
   659  0027  3420               	retlw	32	;' '
   660  0028  3463               	retlw	99	;'c'
   661  0029  346F               	retlw	111	;'o'
   662  002A  346D               	retlw	109	;'m'
   663  002B  3465               	retlw	101	;'e'
   664  002C  3463               	retlw	99	;'c'
   665  002D  3461               	retlw	97	;'a'
   666  002E  3472               	retlw	114	;'r'
   667  002F  3421               	retlw	33	;'!'
   668  0030  3400               	retlw	0
   669  0031                     STR_1:	
   670  0031  3450               	retlw	80	;'P'
   671  0032  3472               	retlw	114	;'r'
   672  0033  3465               	retlw	101	;'e'
   673  0034  3473               	retlw	115	;'s'
   674  0035  3473               	retlw	115	;'s'
   675  0036  3469               	retlw	105	;'i'
   676  0037  346F               	retlw	111	;'o'
   677  0038  346E               	retlw	110	;'n'
   678  0039  3465               	retlw	101	;'e'
   679  003A  3420               	retlw	32	;' '
   680  003B  3452               	retlw	82	;'R'
   681  003C  3442               	retlw	66	;'B'
   682  003D  3431               	retlw	49	;'1'
   683  003E  3400               	retlw	0
   684  003F                     STR_4:	
   685  003F  3456               	retlw	86	;'V'
   686  0040  3465               	retlw	101	;'e'
   687  0041  346E               	retlw	110	;'n'
   688  0042  3463               	retlw	99	;'c'
   689  0043  3465               	retlw	101	;'e'
   690  0044  3475               	retlw	117	;'u'
   691  0045  342E               	retlw	46	;'.'
   692  0046  3420               	retlw	32	;' '
   693  0047  3452               	retlw	82	;'R'
   694  0048  3442               	retlw	66	;'B'
   695  0049  3431               	retlw	49	;'1'
   696  004A  3400               	retlw	0
   697  004B                     STR_3:	
   698  004B  3450               	retlw	80	;'P'
   699  004C  3461               	retlw	97	;'a'
   700  004D  3472               	retlw	114	;'r'
   701  004E  3461               	retlw	97	;'a'
   702  004F  3462               	retlw	98	;'b'
   703  0050  3465               	retlw	101	;'e'
   704  0051  346E               	retlw	110	;'n'
   705  0052  3473               	retlw	115	;'s'
   706  0053  3421               	retlw	33	;'!'
   707  0054  3400               	retlw	0
   708                           
   709                           ; #config settings
   710  0000                     
   711                           	psect	cinit
   712  07DB                     start_initialization:	
   713  07DB                     __initialization:	
   714                           
   715                           ; Initialize objects allocated to BANK1
   716  07DB  1383               	bcf	3,7	;select IRP bank0
   717  07DC  30D2               	movlw	low (__pdataBANK1+16)
   718  07DD  00FD               	movwf	btemp+-1
   719  07DE  3000               	movlw	high __pidataBANK1
   720  07DF  00FE               	movwf	btemp
   721  07E0  3055               	movlw	low __pidataBANK1
   722  07E1  00FF               	movwf	btemp+1
   723  07E2  30C2               	movlw	low __pdataBANK1
   724  07E3  0084               	movwf	4
   725  07E4  120A  158A  260B  120A  118A  	fcall	init_ram0
   726                           
   727                           ; Initialize objects allocated to BANK0
   728  07E9  306D               	movlw	low (__pdataBANK0+4)
   729  07EA  00FD               	movwf	btemp+-1
   730  07EB  300D               	movlw	high __pidataBANK0
   731  07EC  00FE               	movwf	btemp
   732  07ED  307B               	movlw	low __pidataBANK0
   733  07EE  00FF               	movwf	btemp+1
   734  07EF  3069               	movlw	low __pdataBANK0
   735  07F0  0084               	movwf	4
   736  07F1  120A  158A  260B  120A  118A  	fcall	init_ram0
   737                           
   738                           ; Clear objects allocated to BANK0
   739  07F6  3055               	movlw	low __pbssBANK0
   740  07F7  0084               	movwf	4
   741  07F8  3069               	movlw	low (__pbssBANK0+20)
   742  07F9  120A  158A  258A   	fcall	clear_ram0
   743  07FC                     end_of_initialization:	
   744                           ;End of C runtime variable initialization code
   745                           
   746  07FC                     __end_of__initialization:	
   747  07FC  0183               	clrf	3
   748  07FD  120A  118A  2E77   	ljmp	_main	;jump to C main() function
   749                           
   750                           	psect	bssBANK0
   751  0055                     __pbssBANK0:	
   752  0055                     _date:	
   753  0055                     	ds	10
   754  005F                     _time:	
   755  005F                     	ds	10
   756                           
   757                           	psect	dataBANK0
   758  0069                     __pdataBANK0:	
   759  0069                     _randx:	
   760  0069                     	ds	4
   761                           
   762                           	psect	dataBANK1
   763  00C2                     __pdataBANK1:	
   764  00C2                     main@F1498:	
   765  00C2                     	ds	16
   766                           
   767                           	psect	inittext
   768  0E07                     init_fetch0:	
   769                           ;	Called with low address in FSR and high address in W
   770                           
   771  0E07  087E               	movf	126,w
   772  0E08  008A               	movwf	10
   773  0E09  087F               	movf	127,w
   774  0E0A  0082               	movwf	2
   775  0E0B                     init_ram0:	
   776                           ;Called with:
   777                           ;	high address of idata address in btemp 
   778                           ;	low address of idata address in btemp+1 
   779                           ;	low address of data in FSR
   780                           ;	high address + 1 of data in btemp-1
   781                           
   782  0E0B  2607  120A  158A   	fcall	init_fetch0
   783  0E0E  0080               	movwf	0
   784  0E0F  0A84               	incf	4,f
   785  0E10  0804               	movf	4,w
   786  0E11  067D               	xorwf	125,w
   787  0E12  1903               	btfsc	3,2
   788  0E13  3400               	retlw	0
   789  0E14  0AFF               	incf	127,f
   790  0E15  1903               	btfsc	3,2
   791  0E16  0AFE               	incf	126,f
   792  0E17  2E0B               	goto	init_ram0
   793                           
   794                           	psect	clrtext
   795  0D8A                     clear_ram0:	
   796                           ;	Called with FSR containing the base address, and
   797                           ;	W with the last address+1
   798                           
   799  0D8A  0064               	clrwdt	;clear the watchdog before getting into this loop
   800  0D8B                     clrloop0:	
   801  0D8B  0180               	clrf	0	;clear RAM location pointed to by FSR
   802  0D8C  0A84               	incf	4,f	;increment pointer
   803  0D8D  0604               	xorwf	4,w	;XOR with final address
   804  0D8E  1903               	btfsc	3,2	;have we reached the end yet?
   805  0D8F  3400               	retlw	0	;all done for this memory range, return
   806  0D90  0604               	xorwf	4,w	;XOR again to restore value
   807  0D91  2D8B               	goto	clrloop0	;do the next byte
   808                           
   809                           	psect	cstackBANK3
   810  0190                     __pcstackBANK3:	
   811  0190                     main@s:	
   812                           
   813                           ; 74 bytes @ 0x0
   814  0190                     	ds	74
   815                           
   816                           	psect	cstackBANK1
   817  00A0                     __pcstackBANK1:	
   818  00A0                     main@field:	
   819                           
   820                           ; 34 bytes @ 0x0
   821  00A0                     	ds	34
   822                           
   823                           	psect	cstackCOMMON
   824  0070                     __pcstackCOMMON:	
   825  0070                     ?_startSnake:	
   826  0070                     ?_makeFood:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_rtc_r:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_i2c_start:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ??_i2c_start:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_i2c_wb:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ??_i2c_wb:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_i2c_rb:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ??_i2c_rb:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_i2c_stop:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ??_i2c_stop:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_atraso_ms:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_lcd_wr:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ??_lcd_wr:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_lcd_cmd:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_lcd_dat:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_lcd_init:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_main:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_newPair:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_getI:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_getJ:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ??_getJ:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_startQueue:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ??_startQueue:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_front:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_back:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_pop:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_getd:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ??_getd:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_getu:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ??_getu:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_delay:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ??_delay:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_won:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ?_points:	
   926                           ; 2 bytes @ 0x0
   927                           
   928  0070                     ?___awdiv:	
   929                           ; 2 bytes @ 0x0
   930                           
   931  0070                     ?___awmod:	
   932                           ; 2 bytes @ 0x0
   933                           
   934  0070                     ?___lmul:	
   935                           ; 2 bytes @ 0x0
   936                           
   937  0070                     lcd_wr@val:	
   938                           ; 4 bytes @ 0x0
   939                           
   940  0070                     newPair@j:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     getJ@p:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     startQueue@q:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     getu@nn:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     atraso_ms@valor:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ___awdiv@divisor:	
   956                           ; 2 bytes @ 0x0
   957                           
   958  0070                     ___awmod@divisor:	
   959                           ; 2 bytes @ 0x0
   960                           
   961  0070                     ___lmul@multiplier:	
   962                           ; 2 bytes @ 0x0
   963                           
   964                           
   965                           ; 4 bytes @ 0x0
   966  0070                     	ds	1
   967  0071                     ??_lcd_dat:	
   968  0071                     ??_newPair:	
   969                           ; 1 bytes @ 0x1
   970                           
   971  0071                     lcd_dat@val:	
   972                           ; 1 bytes @ 0x1
   973                           
   974  0071                     getd@nn:	
   975                           ; 1 bytes @ 0x1
   976                           
   977                           
   978                           ; 1 bytes @ 0x1
   979  0071                     	ds	1
   980  0072                     ??_won:	
   981  0072                     ??_atraso_ms:	
   982                           ; 1 bytes @ 0x2
   983                           
   984  0072                     ?_lcd_str:	
   985                           ; 1 bytes @ 0x2
   986                           
   987  0072                     newPair@i:	
   988                           ; 1 bytes @ 0x2
   989                           
   990  0072                     i2c_wb@val:	
   991                           ; 1 bytes @ 0x2
   992                           
   993  0072                     i2c_rb@ack:	
   994                           ; 1 bytes @ 0x2
   995                           
   996  0072                     lcd_str@str:	
   997                           ; 1 bytes @ 0x2
   998                           
   999  0072                     ___awdiv@dividend:	
  1000                           ; 2 bytes @ 0x2
  1001                           
  1002  0072                     ___awmod@dividend:	
  1003                           ; 2 bytes @ 0x2
  1004                           
  1005                           
  1006                           ; 2 bytes @ 0x2
  1007  0072                     	ds	1
  1008  0073                     ??_points:	
  1009  0073                     points@s:	
  1010                           ; 1 bytes @ 0x3
  1011                           
  1012  0073                     i2c_wb@i:	
  1013                           ; 1 bytes @ 0x3
  1014                           
  1015  0073                     i2c_rb@ret:	
  1016                           ; 1 bytes @ 0x3
  1017                           
  1018  0073                     atraso_ms@i:	
  1019                           ; 1 bytes @ 0x3
  1020                           
  1021                           
  1022                           ; 2 bytes @ 0x3
  1023  0073                     	ds	1
  1024  0074                     ??_lcd_str:	
  1025  0074                     ??___awdiv:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028  0074                     ??___awmod:	
  1029                           ; 1 bytes @ 0x4
  1030                           
  1031  0074                     i2c_rb@i:	
  1032                           ; 1 bytes @ 0x4
  1033                           
  1034  0074                     ___lmul@multiplicand:	
  1035                           ; 1 bytes @ 0x4
  1036                           
  1037                           
  1038                           ; 4 bytes @ 0x4
  1039  0074                     	ds	1
  1040  0075                     ??_rtc_r:	
  1041  0075                     atraso_ms@j:	
  1042                           ; 1 bytes @ 0x5
  1043                           
  1044  0075                     lcd_str@i:	
  1045                           ; 1 bytes @ 0x5
  1046                           
  1047  0075                     ___awdiv@counter:	
  1048                           ; 1 bytes @ 0x5
  1049                           
  1050  0075                     ___awmod@counter:	
  1051                           ; 1 bytes @ 0x5
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0x5
  1055  0075                     	ds	1
  1056  0076                     ??_lcd_cmd:	
  1057  0076                     lcd_cmd@val:	
  1058                           ; 1 bytes @ 0x6
  1059                           
  1060  0076                     rtc_r@tmp:	
  1061                           ; 1 bytes @ 0x6
  1062                           
  1063  0076                     ___awdiv@sign:	
  1064                           ; 1 bytes @ 0x6
  1065                           
  1066  0076                     ___awmod@sign:	
  1067                           ; 1 bytes @ 0x6
  1068                           
  1069                           
  1070                           ; 1 bytes @ 0x6
  1071  0076                     	ds	1
  1072  0077                     ??_lcd_init:	
  1073  0077                     ?_push:	
  1074                           ; 1 bytes @ 0x7
  1075                           
  1076  0077                     ??_front:	
  1077                           ; 1 bytes @ 0x7
  1078                           
  1079  0077                     ??_back:	
  1080                           ; 1 bytes @ 0x7
  1081                           
  1082  0077                     ??_pop:	
  1083                           ; 1 bytes @ 0x7
  1084                           
  1085  0077                     ?_getRandon:	
  1086                           ; 1 bytes @ 0x7
  1087                           
  1088  0077                     push@x:	
  1089                           ; 2 bytes @ 0x7
  1090                           
  1091  0077                     ___awdiv@quotient:	
  1092                           ; 1 bytes @ 0x7
  1093                           
  1094                           
  1095                           ; 2 bytes @ 0x7
  1096  0077                     	ds	1
  1097  0078                     ??_push:	
  1098  0078                     ??___lmul:	
  1099                           ; 1 bytes @ 0x8
  1100                           
  1101  0078                     back@pos:	
  1102                           ; 1 bytes @ 0x8
  1103                           
  1104                           
  1105                           ; 2 bytes @ 0x8
  1106  0078                     	ds	1
  1107  0079                     ??_getRandon:	
  1108  0079                     ??_getI:	
  1109                           ; 1 bytes @ 0x9
  1110                           
  1111  0079                     pop@q:	
  1112                           ; 1 bytes @ 0x9
  1113                           
  1114  0079                     ___lmul@product:	
  1115                           ; 1 bytes @ 0x9
  1116                           
  1117                           
  1118                           ; 4 bytes @ 0x9
  1119  0079                     	ds	1
  1120  007A                     back@q:	
  1121  007A                     won@s:	
  1122                           ; 1 bytes @ 0xA
  1123                           
  1124  007A                     push@pos:	
  1125                           ; 1 bytes @ 0xA
  1126                           
  1127                           
  1128                           ; 2 bytes @ 0xA
  1129  007A                     	ds	1
  1130  007B                     ?_end:	
  1131  007B                     getI@p:	
  1132                           ; 2 bytes @ 0xB
  1133                           
  1134                           
  1135                           ; 1 bytes @ 0xB
  1136  007B                     	ds	1
  1137  007C                     ?_srand:	
  1138  007C                     ?_increment:	
  1139                           ; 1 bytes @ 0xC
  1140                           
  1141  007C                     ?_isSet:	
  1142                           ; 1 bytes @ 0xC
  1143                           
  1144  007C                     ?_isFood:	
  1145                           ; 2 bytes @ 0xC
  1146                           
  1147  007C                     increment@i:	
  1148                           ; 2 bytes @ 0xC
  1149                           
  1150  007C                     push@q:	
  1151                           ; 1 bytes @ 0xC
  1152                           
  1153  007C                     isSet@p:	
  1154                           ; 1 bytes @ 0xC
  1155                           
  1156  007C                     isFood@p:	
  1157                           ; 1 bytes @ 0xC
  1158                           
  1159  007C                     srand@x:	
  1160                           ; 1 bytes @ 0xC
  1161                           
  1162                           
  1163                           ; 2 bytes @ 0xC
  1164  007C                     	ds	1
  1165  007D                     ?_print:	
  1166  007D                     ?_set:	
  1167                           ; 1 bytes @ 0xD
  1168                           
  1169  007D                     increment@j:	
  1170                           ; 1 bytes @ 0xD
  1171                           
  1172  007D                     set@p:	
  1173                           ; 1 bytes @ 0xD
  1174                           
  1175  007D                     print@field:	
  1176                           ; 1 bytes @ 0xD
  1177                           
  1178                           
  1179                           ; 1 bytes @ 0xD
  1180  007D                     	ds	1
  1181  007E                     ??_srand:	
  1182                           
  1183                           	psect	cstackBANK0
  1184  0020                     __pcstackBANK0:	
  1185                           ; 1 bytes @ 0xE
  1186                           
  1187  0020                     ??_end:	
  1188  0020                     ??_increment:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0020                     ??_set:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0020                     ??_isSet:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0020                     ??_isFood:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0020                     ?_rand:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  0020                     front@pos:	
  1204                           ; 2 bytes @ 0x0
  1205                           
  1206  0020                     getRandon@x:	
  1207                           ; 2 bytes @ 0x0
  1208                           
  1209                           
  1210                           ; 2 bytes @ 0x0
  1211  0020                     	ds	1
  1212  0021                     increment@sumI:	
  1213                           
  1214                           ; 1 bytes @ 0x1
  1215  0021                     	ds	1
  1216  0022                     ??_rand:	
  1217  0022                     increment@sumJ:	
  1218                           ; 1 bytes @ 0x2
  1219                           
  1220  0022                     front@q:	
  1221                           ; 1 bytes @ 0x2
  1222                           
  1223  0022                     _end$329:	
  1224                           ; 1 bytes @ 0x2
  1225                           
  1226  0022                     getRandon@i:	
  1227                           ; 1 bytes @ 0x2
  1228                           
  1229                           
  1230                           ; 2 bytes @ 0x2
  1231  0022                     	ds	1
  1232  0023                     ??_print:	
  1233  0023                     increment@p:	
  1234                           ; 1 bytes @ 0x3
  1235                           
  1236  0023                     set@s:	
  1237                           ; 1 bytes @ 0x3
  1238                           
  1239  0023                     end@s:	
  1240                           ; 1 bytes @ 0x3
  1241                           
  1242                           
  1243                           ; 1 bytes @ 0x3
  1244  0023                     	ds	2
  1245  0025                     isSet@s:	
  1246  0025                     isFood@s:	
  1247                           ; 1 bytes @ 0x5
  1248                           
  1249                           
  1250                           ; 1 bytes @ 0x5
  1251  0025                     	ds	1
  1252  0026                     print@head:	
  1253                           
  1254                           ; 1 bytes @ 0x6
  1255  0026                     	ds	1
  1256  0027                     ??_makeFood:	
  1257  0027                     print@s:	
  1258                           ; 1 bytes @ 0x7
  1259                           
  1260                           
  1261                           ; 1 bytes @ 0x7
  1262  0027                     	ds	1
  1263  0028                     print@j:	
  1264                           
  1265                           ; 2 bytes @ 0x8
  1266  0028                     	ds	2
  1267  002A                     print@i:	
  1268                           
  1269                           ; 2 bytes @ 0xA
  1270  002A                     	ds	1
  1271  002B                     makeFood@i:	
  1272                           
  1273                           ; 2 bytes @ 0xB
  1274  002B                     	ds	2
  1275  002D                     makeFood@j:	
  1276                           
  1277                           ; 2 bytes @ 0xD
  1278  002D                     	ds	2
  1279  002F                     makeFood@s:	
  1280                           
  1281                           ; 1 bytes @ 0xF
  1282  002F                     	ds	1
  1283  0030                     ??_startSnake:	
  1284  0030                     ?_move:	
  1285                           ; 1 bytes @ 0x10
  1286                           
  1287  0030                     move@direction:	
  1288                           ; 1 bytes @ 0x10
  1289                           
  1290                           
  1291                           ; 1 bytes @ 0x10
  1292  0030                     	ds	1
  1293  0031                     ??_move:	
  1294                           
  1295                           ; 1 bytes @ 0x11
  1296  0031                     	ds	2
  1297  0033                     startSnake@i:	
  1298                           
  1299                           ; 2 bytes @ 0x13
  1300  0033                     	ds	1
  1301  0034                     move@head:	
  1302                           
  1303                           ; 1 bytes @ 0x14
  1304  0034                     	ds	1
  1305  0035                     move@lastPosition:	
  1306  0035                     startSnake@j:	
  1307                           ; 1 bytes @ 0x15
  1308                           
  1309                           
  1310                           ; 2 bytes @ 0x15
  1311  0035                     	ds	1
  1312  0036                     move@newPosition:	
  1313                           
  1314                           ; 1 bytes @ 0x16
  1315  0036                     	ds	1
  1316  0037                     startSnake@s:	
  1317  0037                     move@s:	
  1318                           ; 1 bytes @ 0x17
  1319                           
  1320                           
  1321                           ; 1 bytes @ 0x17
  1322  0037                     	ds	1
  1323  0038                     ??_main:	
  1324                           
  1325                           ; 1 bytes @ 0x18
  1326  0038                     	ds	9
  1327  0041                     main@message:	
  1328                           
  1329                           ; 16 bytes @ 0x21
  1330  0041                     	ds	16
  1331  0051                     main@pts:	
  1332                           
  1333                           ; 2 bytes @ 0x31
  1334  0051                     	ds	2
  1335  0053                     main@direction:	
  1336                           
  1337                           ; 2 bytes @ 0x33
  1338  0053                     	ds	2
  1339                           
  1340                           	psect	maintext
  1341  0677                     __pmaintext:	
  1342 ;;
  1343 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  1344 ;;
  1345 ;; *************** function _main *****************
  1346 ;; Defined at:
  1347 ;;		line 21 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  pts             2   49[BANK0 ] int 
  1352 ;;  s              74    0[BANK3 ] struct .
  1353 ;;  field          34    0[BANK1 ] unsigned char [17][2]
  1354 ;;  message        16   33[BANK0 ] unsigned char [16]
  1355 ;;  direction       2   51[BANK0 ] int 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : B00/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1365 ;;      Params:         0       0       0       0       0
  1366 ;;      Locals:         0      20      34      74       0
  1367 ;;      Temps:          0       9       0       0       0
  1368 ;;      Totals:         0      29      34      74       0
  1369 ;;Total ram usage:      137 bytes
  1370 ;; Hardware stack levels required when called:    5
  1371 ;; This function calls:
  1372 ;;		___awdiv
  1373 ;;		___awmod
  1374 ;;		_end
  1375 ;;		_lcd_cmd
  1376 ;;		_lcd_init
  1377 ;;		_lcd_str
  1378 ;;		_move
  1379 ;;		_points
  1380 ;;		_print
  1381 ;;		_startSnake
  1382 ;;		_won
  1383 ;; This function is called by:
  1384 ;;		Startup code after reset
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _main
  1390  0677                     _main:	
  1391                           
  1392                           ;main.c: 22: char message[16] = "   pontos! RB1";
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1396  0677  3041               	movlw	main@message& (0+255)
  1397  0678  0084               	movwf	4
  1398  0679  30C2               	movlw	low main@F1498
  1399  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1400  067B  1303               	bcf	3,6	;RP1=0, select bank0
  1401  067C  00B8               	movwf	??_main
  1402  067D  0804               	movf	4,w
  1403  067E  00B9               	movwf	??_main+1
  1404  067F  3010               	movlw	16
  1405  0680  00BA               	movwf	??_main+2
  1406  0681                     u1480:	
  1407  0681  0838               	movf	??_main,w
  1408  0682  0084               	movwf	4
  1409  0683  1383               	bcf	3,7	;select IRP bank1
  1410  0684  0800               	movf	0,w
  1411  0685  00BB               	movwf	??_main+3
  1412  0686  0AB8               	incf	??_main,f
  1413  0687  0839               	movf	??_main+1,w
  1414  0688  0084               	movwf	4
  1415  0689  083B               	movf	??_main+3,w
  1416  068A  0080               	movwf	0
  1417  068B  0AB9               	incf	??_main+1,f
  1418  068C  0BBA               	decfsz	??_main+2,f
  1419  068D  2E81               	goto	u1480
  1420                           
  1421                           ;main.c: 25: TRISC=0x01;
  1422  068E  3001               	movlw	1
  1423  068F  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0690  1303               	bcf	3,6	;RP1=0, select bank1
  1425  0691  0087               	movwf	7	;volatile
  1426                           
  1427                           ;main.c: 26: TRISD=0x00;
  1428  0692  0188               	clrf	8	;volatile
  1429                           
  1430                           ;main.c: 27: TRISE=0x00;
  1431  0693  0189               	clrf	9	;volatile
  1432                           
  1433                           ;main.c: 31: ADCON1=0x0F;
  1434  0694  300F               	movlw	15
  1435  0695  009F               	movwf	31	;volatile
  1436                           
  1437                           ;main.c: 32: TRISA|=0x20;
  1438  0696  1685               	bsf	5,5	;volatile
  1439                           
  1440                           ;main.c: 34: TRISB=0x3F;
  1441  0697  303F               	movlw	63
  1442  0698  0086               	movwf	6	;volatile
  1443                           
  1444                           ;main.c: 36: lcd_init();
  1445  0699  120A  118A  2244  120A  118A  	fcall	_lcd_init
  1446                           
  1447                           ;main.c: 37: lcd_cmd(0x01);
  1448  069E  3001               	movlw	1
  1449  069F  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1450                           
  1451                           ;main.c: 38: lcd_cmd(0x80);
  1452  06A4  3080               	movlw	128
  1453  06A5  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1454                           
  1455                           ;main.c: 39: lcd_str("Pressione RB1");
  1456  06AA  301F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1457  06AB  00F2               	movwf	lcd_str@str
  1458  06AC  3080               	movlw	128
  1459  06AD  00F3               	movwf	lcd_str@str+1
  1460  06AE  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1461                           
  1462                           ;main.c: 40: lcd_cmd(0xC0);
  1463  06B3  30C0               	movlw	192
  1464  06B4  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1465                           
  1466                           ;main.c: 41: lcd_str("Para comecar!");
  1467  06B9  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1468  06BA  00F2               	movwf	lcd_str@str
  1469  06BB  3080               	movlw	128
  1470  06BC  00F3               	movwf	lcd_str@str+1
  1471  06BD  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1472  06C2                     l69:	
  1473                           ;main.c: 42: while(PORTBbits.RB1);
  1474                           
  1475  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1476  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1477  06C4  1886               	btfsc	6,1	;volatile
  1478  06C5  2EC2               	goto	l69
  1479  06C6                     l1752:	
  1480                           ;main.c: 43: int direction;
  1481                           ;main.c: 44: char field[2][16+1];
  1482                           ;main.c: 45: Snake s;
  1483                           ;main.c: 46: while (1){
  1484                           
  1485                           
  1486                           ;main.c: 47: startSnake(&s);
  1487  06C6  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1488  06C7  120A  118A  241C  120A  118A  	fcall	_startSnake
  1489  06CC                     L3:	
  1490                           
  1491                           ;main.c: 48: print(&s, field);
  1492  06CC  30A0               	movlw	(low (main@field| 0))& (0+255)
  1493  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1494  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1495  06CF  00B8               	movwf	??_main
  1496  06D0  0838               	movf	??_main,w
  1497  06D1  00FD               	movwf	print@field
  1498  06D2  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1499  06D3  120A  118A  2391  120A  118A  	fcall	_print
  1500                           
  1501                           ;main.c: 49: lcd_cmd(0x01);
  1502  06D8  3001               	movlw	1
  1503  06D9  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1504                           
  1505                           ;main.c: 50: lcd_cmd(0x80);
  1506  06DE  3080               	movlw	128
  1507  06DF  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1508                           
  1509                           ;main.c: 51: lcd_str(field[0]);
  1510  06E4  30A0               	movlw	(low (main@field| 0))& (0+255)
  1511  06E5  00F2               	movwf	lcd_str@str
  1512  06E6  3000               	movlw	0
  1513  06E7  00F3               	movwf	lcd_str@str+1
  1514  06E8  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1515                           
  1516                           ;main.c: 52: lcd_cmd(0xC0);
  1517  06ED  30C0               	movlw	192
  1518  06EE  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1519                           
  1520                           ;main.c: 53: lcd_str(field[1]);
  1521  06F3  30B1               	movlw	(low ((main@field| 0+17)))& (0+255)
  1522  06F4  00F2               	movwf	lcd_str@str
  1523  06F5  3000               	movlw	0
  1524  06F6  00F3               	movwf	lcd_str@str+1
  1525  06F7  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1526                           
  1527                           ;main.c: 54: while(!end(&s)){
  1528  06FC  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1529  06FD  120A  158A  2655  120A  118A  	fcall	_end
  1530  0702  087B               	movf	?_end,w
  1531  0703  047C               	iorwf	?_end+1,w
  1532  0704  1D03               	btfss	3,2
  1533  0705  2F57               	goto	l1792
  1534  0706                     l1762:	
  1535                           ;main.c: 55: while((direction = (PORTBbits.RB0 << 0) + (PORTBbits.RB1 << 1) + (PORTBbits
      +                          .RB2 << 2))
  1536                           ;main.c: 56: == ((1 << 3) - 1));
  1537                           
  1538  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0708  0C06               	rrf	6,w	;volatile
  1541  0709  00B8               	movwf	??_main
  1542  070A  0C38               	rrf	??_main,w
  1543  070B  3901               	andlw	1
  1544  070C  00B9               	movwf	??_main+1
  1545  070D  01BA               	clrf	??_main+2
  1546  070E  1003               	clrc
  1547  070F  0DB9               	rlf	??_main+1,f
  1548  0710  0DBA               	rlf	??_main+2,f
  1549  0711  1003               	clrc
  1550  0712  0DB9               	rlf	??_main+1,f
  1551  0713  0DBA               	rlf	??_main+2,f
  1552  0714  0C06               	rrf	6,w	;volatile
  1553  0715  3901               	andlw	1
  1554  0716  00BB               	movwf	??_main+3
  1555  0717  01BC               	clrf	??_main+4
  1556  0718  1003               	clrc
  1557  0719  0DBB               	rlf	??_main+3,f
  1558  071A  0DBC               	rlf	??_main+4,f
  1559  071B  0806               	movf	6,w	;volatile
  1560  071C  3901               	andlw	1
  1561  071D  073B               	addwf	??_main+3,w
  1562  071E  00BD               	movwf	??_main+5
  1563  071F  083C               	movf	??_main+4,w
  1564  0720  1803               	skipnc
  1565  0721  0A3C               	incf	??_main+4,w
  1566  0722  00BE               	movwf	??_main+6
  1567  0723  0839               	movf	??_main+1,w
  1568  0724  073D               	addwf	??_main+5,w
  1569  0725  00BF               	movwf	??_main+7
  1570  0726  083A               	movf	??_main+2,w
  1571  0727  1803               	skipnc
  1572  0728  0A3A               	incf	??_main+2,w
  1573  0729  073E               	addwf	??_main+6,w
  1574  072A  00C0               	movwf	??_main+8
  1575  072B  083F               	movf	??_main+7,w
  1576  072C  00D3               	movwf	main@direction
  1577  072D  0840               	movf	??_main+8,w
  1578  072E  00D4               	movwf	main@direction+1
  1579  072F  3007               	movlw	7
  1580  0730  0653               	xorwf	main@direction,w
  1581  0731  0454               	iorwf	main@direction+1,w
  1582  0732  1903               	btfsc	3,2
  1583  0733  2F06               	goto	l1762
  1584                           
  1585                           ;main.c: 58: if (direction == 6)
  1586  0734  3006               	movlw	6
  1587  0735  0653               	xorwf	main@direction,w
  1588  0736  0454               	iorwf	main@direction+1,w
  1589  0737  1D03               	btfss	3,2
  1590  0738  2F3C               	goto	l1768
  1591                           
  1592                           ;main.c: 59: direction = 0;
  1593  0739  01D3               	clrf	main@direction
  1594  073A  01D4               	clrf	main@direction+1
  1595  073B  2F4C               	goto	l1776
  1596  073C                     l1768:	
  1597                           
  1598                           ;main.c: 60: else if (direction == 5)
  1599  073C  3005               	movlw	5
  1600  073D  0653               	xorwf	main@direction,w
  1601  073E  0454               	iorwf	main@direction+1,w
  1602  073F  1D03               	btfss	3,2
  1603  0740  2F43               	goto	l1772
  1604                           
  1605                           ;main.c: 61: direction = 1;
  1606  0741  3001               	movlw	1
  1607  0742  2F49               	goto	L1
  1608  0743                     l1772:	
  1609                           
  1610                           ;main.c: 62: else if (direction == 3)
  1611  0743  3003               	movlw	3
  1612  0744  0653               	xorwf	main@direction,w
  1613  0745  0454               	iorwf	main@direction+1,w
  1614  0746  1D03               	btfss	3,2
  1615  0747  2F4C               	goto	l1776
  1616                           
  1617                           ;main.c: 63: direction = 2;
  1618  0748  3002               	movlw	2
  1619  0749                     L1:	
  1620  0749  00D3               	movwf	main@direction
  1621  074A  3000               	movlw	0
  1622  074B  00D4               	movwf	main@direction+1
  1623  074C                     l1776:	
  1624                           
  1625                           ;main.c: 65: move(&s, direction);
  1626  074C  0853               	movf	main@direction,w
  1627  074D  00B8               	movwf	??_main
  1628  074E  0838               	movf	??_main,w
  1629  074F  00B0               	movwf	move@direction
  1630  0750  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1631  0751  120A  118A  24AD  120A  118A  	fcall	_move
  1632  0756  2ECC               	goto	L3
  1633  0757                     l1792:	
  1634                           ;main.c: 71: lcd_str(field[1]);
  1635                           
  1636                           ;main.c: 70: lcd_cmd(0xC0);
  1637                           
  1638                           ;main.c: 69: lcd_str(field[0]);
  1639                           
  1640                           ;main.c: 68: lcd_cmd(0x80);
  1641                           
  1642                           ;main.c: 67: lcd_cmd(0x01);
  1643                           
  1644                           ;main.c: 66: print(&s, field);
  1645                           
  1646                           
  1647                           ;main.c: 72: }
  1648                           ;main.c: 73: if (won(&s)){
  1649  0757  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1650  0758  120A  158A  2710  120A  118A  	fcall	_won
  1651  075D  0870               	movf	?_won,w
  1652  075E  0471               	iorwf	?_won+1,w
  1653  075F  1903               	btfsc	3,2
  1654  0760  2F7E               	goto	l1800
  1655                           
  1656                           ;main.c: 74: lcd_cmd(0x01);
  1657  0761  3001               	movlw	1
  1658  0762  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1659                           
  1660                           ;main.c: 75: lcd_cmd(0x80);
  1661  0767  3080               	movlw	128
  1662  0768  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1663                           
  1664                           ;main.c: 76: lcd_str("Parabens!");
  1665  076D  3039               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1666  076E  00F2               	movwf	lcd_str@str
  1667  076F  3080               	movlw	128
  1668  0770  00F3               	movwf	lcd_str@str+1
  1669  0771  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1670                           
  1671                           ;main.c: 77: lcd_cmd(0xC0);
  1672  0776  30C0               	movlw	192
  1673  0777  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1674                           
  1675                           ;main.c: 78: lcd_str("Venceu. RB1");
  1676  077C  302D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1677  077D  2FCE               	goto	L2
  1678  077E                     l1800:	
  1679                           ;main.c: 79: }
  1680                           
  1681                           
  1682                           ;main.c: 80: else{
  1683                           ;main.c: 81: lcd_cmd(0x01);
  1684  077E  3001               	movlw	1
  1685  077F  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1686                           
  1687                           ;main.c: 82: lcd_cmd(0x80);
  1688  0784  3080               	movlw	128
  1689  0785  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1690                           
  1691                           ;main.c: 83: int pts = points(&s);
  1692  078A  3090               	movlw	(low (main@s| (0+256)))& (0+255)
  1693  078B  120A  158A  25A4  120A  118A  	fcall	_points
  1694  0790  0871               	movf	?_points+1,w
  1695  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0793  00D2               	movwf	main@pts+1
  1698  0794  0870               	movf	?_points,w
  1699  0795  00D1               	movwf	main@pts
  1700                           
  1701                           ;main.c: 84: message[0] = '0' + pts/10;
  1702  0796  300A               	movlw	10
  1703  0797  00F0               	movwf	___awdiv@divisor
  1704  0798  3000               	movlw	0
  1705  0799  00F1               	movwf	___awdiv@divisor+1
  1706  079A  0852               	movf	main@pts+1,w
  1707  079B  00F3               	movwf	___awdiv@dividend+1
  1708  079C  0851               	movf	main@pts,w
  1709  079D  00F2               	movwf	___awdiv@dividend
  1710  079E  120A  118A  2338  120A  118A  	fcall	___awdiv
  1711  07A3  0870               	movf	?___awdiv,w
  1712  07A4  3E30               	addlw	48
  1713  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1714  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1715  07A7  00B8               	movwf	??_main
  1716  07A8  0838               	movf	??_main,w
  1717  07A9  00C1               	movwf	main@message
  1718                           
  1719                           ;main.c: 85: message[1] = '0' + pts%10;
  1720  07AA  300A               	movlw	10
  1721  07AB  00F0               	movwf	___awmod@divisor
  1722  07AC  3000               	movlw	0
  1723  07AD  00F1               	movwf	___awmod@divisor+1
  1724  07AE  0852               	movf	main@pts+1,w
  1725  07AF  00F3               	movwf	___awmod@dividend+1
  1726  07B0  0851               	movf	main@pts,w
  1727  07B1  00F2               	movwf	___awmod@dividend
  1728  07B2  120A  118A  21AA  120A  118A  	fcall	___awmod
  1729  07B7  0870               	movf	?___awmod,w
  1730  07B8  3E30               	addlw	48
  1731  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1732  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  1733  07BB  00B8               	movwf	??_main
  1734  07BC  0838               	movf	??_main,w
  1735  07BD  00C2               	movwf	main@message+1
  1736                           
  1737                           ;main.c: 86: lcd_str(message);
  1738  07BE  3041               	movlw	(low (main@message| 0))& (0+255)
  1739  07BF  00F2               	movwf	lcd_str@str
  1740  07C0  3000               	movlw	0
  1741  07C1  00F3               	movwf	lcd_str@str+1
  1742  07C2  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1743                           
  1744                           ;main.c: 87: lcd_cmd(0xC0);
  1745  07C7  30C0               	movlw	192
  1746  07C8  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  1747                           
  1748                           ;main.c: 88: lcd_str("Tente novamente");
  1749  07CD  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1750  07CE                     L2:	
  1751  07CE  00F2               	movwf	lcd_str@str
  1752  07CF  3080               	movlw	128
  1753  07D0  00F3               	movwf	lcd_str@str+1
  1754  07D1  120A  158A  26E6  120A  118A  	fcall	_lcd_str
  1755  07D6                     l86:	
  1756                           ;main.c: 89: }
  1757                           ;main.c: 90: while(PORTBbits.RB1);
  1758                           
  1759  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1760  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1761  07D8  1C86               	btfss	6,1	;volatile
  1762  07D9  2EC6               	goto	l1752
  1763  07DA  2FD6               	goto	l86
  1764  07DB                     __end_of_main:	
  1765                           
  1766                           	psect	text1
  1767  041C                     __ptext1:	
  1768 ;; *************** function _startSnake *****************
  1769 ;; Defined at:
  1770 ;;		line 16 in file "snake.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  s               1    wreg     PTR struct .
  1773 ;;		 -> main@s(74), 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  s               1   23[BANK0 ] PTR struct .
  1776 ;;		 -> main@s(74), 
  1777 ;;  j               2   21[BANK0 ] int 
  1778 ;;  i               2   19[BANK0 ] int 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1788 ;;      Params:         0       0       0       0       0
  1789 ;;      Locals:         0       5       0       0       0
  1790 ;;      Temps:          0       3       0       0       0
  1791 ;;      Totals:         0       8       0       0       0
  1792 ;;Total ram usage:        8 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    4
  1795 ;; This function calls:
  1796 ;;		_getRandon
  1797 ;;		_makeFood
  1798 ;;		_newPair
  1799 ;;		_set
  1800 ;;		_srand
  1801 ;;		_startQueue
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           
  1808                           ;psect for function _startSnake
  1809  041C                     _startSnake:	
  1810                           
  1811                           ;incstack = 0
  1812                           ; Regs used in _startSnake: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1813                           ;startSnake@s stored from wreg
  1814  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1815  041D  1303               	bcf	3,6	;RP1=0, select bank0
  1816  041E  00B7               	movwf	startSnake@s
  1817                           
  1818                           ;snake.c: 17: srand(getRandon());
  1819  041F  120A  118A  211F  120A  118A  	fcall	_getRandon
  1820  0424  0878               	movf	?_getRandon+1,w
  1821  0425  00FD               	movwf	srand@x+1
  1822  0426  0877               	movf	?_getRandon,w
  1823  0427  00FC               	movwf	srand@x
  1824  0428  120A  158A  259B  120A  118A  	fcall	_srand
  1825                           
  1826                           ;snake.c: 18: startQueue(&(s->q));
  1827  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1828  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1829  042F  0837               	movf	startSnake@s,w
  1830  0430  3E20               	addlw	32
  1831  0431  120A  158A  2618  120A  118A  	fcall	_startQueue
  1832                           
  1833                           ;snake.c: 19: int i, j;
  1834                           ;snake.c: 20: for (i = 0; i < 2; i++)
  1835  0436  1283               	bcf	3,5	;RP0=0, select bank0
  1836  0437  1303               	bcf	3,6	;RP1=0, select bank0
  1837  0438  01B3               	clrf	startSnake@i
  1838  0439  01B4               	clrf	startSnake@i+1
  1839  043A  0834               	movf	startSnake@i+1,w
  1840  043B  3A80               	xorlw	128
  1841  043C  00FF               	movwf	127
  1842  043D  3080               	movlw	128
  1843  043E  027F               	subwf	127,w
  1844  043F  1D03               	skipz
  1845  0440  2C43               	goto	u1305
  1846  0441  3002               	movlw	2
  1847  0442  0233               	subwf	startSnake@i,w
  1848  0443                     u1305:	
  1849  0443  1803               	btfsc	3,0
  1850  0444  2C8D               	goto	l1634
  1851  0445                     l1618:	
  1852                           
  1853                           ;snake.c: 21: for (j = 0; j < 16; j++)
  1854  0445  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0446  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0447  01B5               	clrf	startSnake@j
  1857  0448  01B6               	clrf	startSnake@j+1
  1858  0449  0836               	movf	startSnake@j+1,w
  1859  044A  3A80               	xorlw	128
  1860  044B  00FF               	movwf	127
  1861  044C  3080               	movlw	128
  1862  044D  027F               	subwf	127,w
  1863  044E  1D03               	skipz
  1864  044F  2C52               	goto	u1315
  1865  0450  3010               	movlw	16
  1866  0451  0235               	subwf	startSnake@j,w
  1867  0452                     u1315:	
  1868  0452  1803               	btfsc	3,0
  1869  0453  2C7A               	goto	l1630
  1870  0454                     l1624:	
  1871                           
  1872                           ;snake.c: 22: s->field[i][j] = 0;
  1873  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0456  0833               	movf	startSnake@i,w
  1876  0457  00B0               	movwf	??_startSnake
  1877  0458  3003               	movlw	3
  1878  0459                     u1325:	
  1879  0459  1003               	clrc
  1880  045A  0DB0               	rlf	??_startSnake,f
  1881  045B  3EFF               	addlw	-1
  1882  045C  1D03               	skipz
  1883  045D  2C59               	goto	u1325
  1884  045E  1003               	clrc
  1885  045F  0D30               	rlf	??_startSnake,w
  1886  0460  0737               	addwf	startSnake@s,w
  1887  0461  00B1               	movwf	??_startSnake+1
  1888  0462  0835               	movf	startSnake@j,w
  1889  0463  0731               	addwf	??_startSnake+1,w
  1890  0464  00B2               	movwf	??_startSnake+2
  1891  0465  0832               	movf	??_startSnake+2,w
  1892  0466  0084               	movwf	4
  1893  0467  1783               	bsf	3,7	;select IRP bank2
  1894  0468  0180               	clrf	0
  1895  0469  3001               	movlw	1
  1896  046A  07B5               	addwf	startSnake@j,f
  1897  046B  1803               	skipnc
  1898  046C  0AB6               	incf	startSnake@j+1,f
  1899  046D  3000               	movlw	0
  1900  046E  07B6               	addwf	startSnake@j+1,f
  1901  046F  0836               	movf	startSnake@j+1,w
  1902  0470  3A80               	xorlw	128
  1903  0471  00FF               	movwf	127
  1904  0472  3080               	movlw	128
  1905  0473  027F               	subwf	127,w
  1906  0474  1D03               	skipz
  1907  0475  2C78               	goto	u1335
  1908  0476  3010               	movlw	16
  1909  0477  0235               	subwf	startSnake@j,w
  1910  0478                     u1335:	
  1911  0478  1C03               	skipc
  1912  0479  2C54               	goto	l1624
  1913  047A                     l1630:	
  1914  047A  3001               	movlw	1
  1915  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1916  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1917  047D  07B3               	addwf	startSnake@i,f
  1918  047E  1803               	skipnc
  1919  047F  0AB4               	incf	startSnake@i+1,f
  1920  0480  3000               	movlw	0
  1921  0481  07B4               	addwf	startSnake@i+1,f
  1922  0482  0834               	movf	startSnake@i+1,w
  1923  0483  3A80               	xorlw	128
  1924  0484  00FF               	movwf	127
  1925  0485  3080               	movlw	128
  1926  0486  027F               	subwf	127,w
  1927  0487  1D03               	skipz
  1928  0488  2C8B               	goto	u1345
  1929  0489  3002               	movlw	2
  1930  048A  0233               	subwf	startSnake@i,w
  1931  048B                     u1345:	
  1932  048B  1C03               	skipc
  1933  048C  2C45               	goto	l1618
  1934  048D                     l1634:	
  1935                           
  1936                           ;snake.c: 23: s->fail = 0;
  1937  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1938  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1939  048F  0837               	movf	startSnake@s,w
  1940  0490  3E49               	addlw	73
  1941  0491  0084               	movwf	4
  1942  0492  1783               	bsf	3,7	;select IRP bank2
  1943  0493  0180               	clrf	0
  1944                           
  1945                           ;snake.c: 24: set(s, newPair(0, 0));
  1946  0494  01F0               	clrf	newPair@j
  1947  0495  3000               	movlw	0
  1948  0496  120A  158A  25AF  120A  118A  	fcall	_newPair
  1949  049B  1283               	bcf	3,5	;RP0=0, select bank0
  1950  049C  1303               	bcf	3,6	;RP1=0, select bank0
  1951  049D  00B0               	movwf	??_startSnake
  1952  049E  0830               	movf	??_startSnake,w
  1953  049F  00FD               	movwf	set@p
  1954  04A0  0837               	movf	startSnake@s,w
  1955  04A1  120A  158A  273C  120A  118A  	fcall	_set
  1956                           
  1957                           ;snake.c: 25: makeFood(s);
  1958  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1959  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1960  04A8  0837               	movf	startSnake@s,w
  1961  04A9  120A  118A  22E6   	fcall	_makeFood
  1962  04AC  0008               	return
  1963  04AD                     __end_of_startSnake:	
  1964                           
  1965                           	psect	text2
  1966  0E18                     __ptext2:	
  1967 ;; *************** function _startQueue *****************
  1968 ;; Defined at:
  1969 ;;		line 3 in file "queue.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  q               1    wreg     PTR struct .
  1972 ;;		 -> main@s(74), 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  q               1    0[COMMON] PTR struct .
  1975 ;;		 -> main@s(74), 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1985 ;;      Params:         0       0       0       0       0
  1986 ;;      Locals:         1       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0
  1988 ;;      Totals:         1       0       0       0       0
  1989 ;;Total ram usage:        1 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_startSnake
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function _startQueue
  2000  0E18                     _startQueue:	
  2001                           
  2002                           ;incstack = 0
  2003                           ; Regs used in _startQueue: [wreg-fsr0h+status,2+status,0]
  2004                           ;startQueue@q stored from wreg
  2005  0E18  00F0               	movwf	startQueue@q
  2006                           
  2007                           ;queue.c: 4: q->capacity = 33;
  2008  0E19  0870               	movf	startQueue@q,w
  2009  0E1A  0084               	movwf	4
  2010  0E1B  3021               	movlw	33
  2011  0E1C  1783               	bsf	3,7	;select IRP bank2
  2012  0E1D  0080               	movwf	0
  2013  0E1E  0A84               	incf	4,f
  2014  0E1F  3000               	movlw	0
  2015  0E20  0080               	movwf	0
  2016                           
  2017                           ;queue.c: 5: q->head = q->tail = q->size = 0;
  2018  0E21  0870               	movf	startQueue@q,w
  2019  0E22  3E02               	addlw	2
  2020  0E23  0084               	movwf	4
  2021  0E24  0180               	clrf	0
  2022  0E25  0A84               	incf	4,f
  2023  0E26  0180               	clrf	0
  2024  0E27  0870               	movf	startQueue@q,w
  2025  0E28  3E06               	addlw	6
  2026  0E29  0084               	movwf	4
  2027  0E2A  0180               	clrf	0
  2028  0E2B  0A84               	incf	4,f
  2029  0E2C  0180               	clrf	0
  2030  0E2D  0870               	movf	startQueue@q,w
  2031  0E2E  3E04               	addlw	4
  2032  0E2F  0084               	movwf	4
  2033  0E30  0180               	clrf	0
  2034  0E31  0A84               	incf	4,f
  2035  0E32  0180               	clrf	0
  2036  0E33  0008               	return
  2037  0E34                     __end_of_startQueue:	
  2038                           
  2039                           	psect	text3
  2040  0D9B                     __ptext3:	
  2041 ;; *************** function _srand *****************
  2042 ;; Defined at:
  2043 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  x               2   12[COMMON] unsigned int 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2057 ;;      Params:         2       0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0
  2060 ;;      Totals:         2       0       0       0       0
  2061 ;;Total ram usage:        2 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_startSnake
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function _srand
  2072  0D9B                     _srand:	
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in _srand: [wreg]
  2076  0D9B  087C               	movf	srand@x,w
  2077  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  2079  0D9E  00E9               	movwf	_randx
  2080  0D9F  087D               	movf	srand@x+1,w
  2081  0DA0  00EA               	movwf	_randx+1
  2082  0DA1  01EB               	clrf	_randx+2
  2083  0DA2  01EC               	clrf	_randx+3
  2084  0DA3  0008               	return
  2085  0DA4                     __end_of_srand:	
  2086                           
  2087                           	psect	text4
  2088  011F                     __ptext4:	
  2089 ;; *************** function _getRandon *****************
  2090 ;; Defined at:
  2091 ;;		line 32 in file "rtc_r.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  i               2    2[BANK0 ] int 
  2096 ;;  x               2    0[BANK0 ] int 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  2    7[COMMON] int 
  2099 ;; Registers used:
  2100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         2       0       0       0       0
  2107 ;;      Locals:         0       4       0       0       0
  2108 ;;      Temps:          3       0       0       0       0
  2109 ;;      Totals:         5       4       0       0       0
  2110 ;;Total ram usage:        9 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    3
  2113 ;; This function calls:
  2114 ;;		_rtc_r
  2115 ;; This function is called by:
  2116 ;;		_startSnake
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _getRandon
  2122  011F                     _getRandon:	
  2123                           
  2124                           ;rtc_r.c: 33: rtc_r();
  2125                           
  2126                           ;incstack = 0
  2127                           ; Regs used in _getRandon: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2128  011F  120A  118A  2578  120A  118A  	fcall	_rtc_r
  2129                           
  2130                           ;rtc_r.c: 34: int x = 0, i;
  2131  0124  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0125  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0126  01A0               	clrf	getRandon@x
  2134  0127  01A1               	clrf	getRandon@x+1
  2135                           
  2136                           ;rtc_r.c: 35: for (i = 0; i < 8; i++)
  2137  0128  01A2               	clrf	getRandon@i
  2138  0129  01A3               	clrf	getRandon@i+1
  2139  012A  0823               	movf	getRandon@i+1,w
  2140  012B  3A80               	xorlw	128
  2141  012C  00FF               	movwf	127
  2142  012D  3080               	movlw	128
  2143  012E  027F               	subwf	127,w
  2144  012F  1D03               	skipz
  2145  0130  2933               	goto	u1255
  2146  0131  3008               	movlw	8
  2147  0132  0222               	subwf	getRandon@i,w
  2148  0133                     u1255:	
  2149  0133  1803               	btfsc	3,0
  2150  0134  295C               	goto	l1582
  2151  0135                     l1576:	
  2152                           
  2153                           ;rtc_r.c: 36: x += time[i] + date[i];
  2154  0135  1283               	bcf	3,5	;RP0=0, select bank0
  2155  0136  1303               	bcf	3,6	;RP1=0, select bank0
  2156  0137  0822               	movf	getRandon@i,w
  2157  0138  3E55               	addlw	(low (_date| 0))& (0+255)
  2158  0139  0084               	movwf	4
  2159  013A  1383               	bcf	3,7	;select IRP bank0
  2160  013B  0800               	movf	0,w
  2161  013C  00F9               	movwf	??_getRandon
  2162  013D  0822               	movf	getRandon@i,w
  2163  013E  3E5F               	addlw	(low (_time| 0))& (0+255)
  2164  013F  0084               	movwf	4
  2165  0140  0800               	movf	0,w
  2166  0141  0779               	addwf	??_getRandon,w
  2167  0142  00FA               	movwf	??_getRandon+1
  2168  0143  01FB               	clrf	??_getRandon+2
  2169  0144  0DFB               	rlf	??_getRandon+2,f
  2170  0145  087A               	movf	??_getRandon+1,w
  2171  0146  07A0               	addwf	getRandon@x,f
  2172  0147  1803               	skipnc
  2173  0148  0AA1               	incf	getRandon@x+1,f
  2174  0149  087B               	movf	??_getRandon+2,w
  2175  014A  07A1               	addwf	getRandon@x+1,f
  2176  014B  3001               	movlw	1
  2177  014C  07A2               	addwf	getRandon@i,f
  2178  014D  1803               	skipnc
  2179  014E  0AA3               	incf	getRandon@i+1,f
  2180  014F  3000               	movlw	0
  2181  0150  07A3               	addwf	getRandon@i+1,f
  2182  0151  0823               	movf	getRandon@i+1,w
  2183  0152  3A80               	xorlw	128
  2184  0153  00FF               	movwf	127
  2185  0154  3080               	movlw	128
  2186  0155  027F               	subwf	127,w
  2187  0156  1D03               	skipz
  2188  0157  295A               	goto	u1265
  2189  0158  3008               	movlw	8
  2190  0159  0222               	subwf	getRandon@i,w
  2191  015A                     u1265:	
  2192  015A  1C03               	skipc
  2193  015B  2935               	goto	l1576
  2194  015C                     l1582:	
  2195                           
  2196                           ;rtc_r.c: 37: return x;
  2197  015C  1283               	bcf	3,5	;RP0=0, select bank0
  2198  015D  1303               	bcf	3,6	;RP1=0, select bank0
  2199  015E  0821               	movf	getRandon@x+1,w
  2200  015F  00F8               	movwf	?_getRandon+1
  2201  0160  0820               	movf	getRandon@x,w
  2202  0161  00F7               	movwf	?_getRandon
  2203  0162  0008               	return
  2204  0163                     __end_of_getRandon:	
  2205                           
  2206                           	psect	text5
  2207  0578                     __ptext5:	
  2208 ;; *************** function _rtc_r *****************
  2209 ;; Defined at:
  2210 ;;		line 51 in file "rtc_r.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  tmp             1    6[COMMON] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, pclath, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2224 ;;      Params:         0       0       0       0       0
  2225 ;;      Locals:         1       0       0       0       0
  2226 ;;      Temps:          1       0       0       0       0
  2227 ;;      Totals:         2       0       0       0       0
  2228 ;;Total ram usage:        2 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    2
  2231 ;; This function calls:
  2232 ;;		_getd
  2233 ;;		_getu
  2234 ;;		_i2c_rb
  2235 ;;		_i2c_start
  2236 ;;		_i2c_stop
  2237 ;;		_i2c_wb
  2238 ;; This function is called by:
  2239 ;;		_getRandon
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           
  2244                           ;psect for function _rtc_r
  2245  0578                     _rtc_r:	
  2246                           
  2247                           ;rtc_r.c: 53: unsigned char tmp;
  2248                           ;rtc_r.c: 55: i2c_start();
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _rtc_r: [wreg+status,2+status,0+pclath+cstack]
  2252  0578  120A  158A  25D6  120A  118A  	fcall	_i2c_start
  2253                           
  2254                           ;rtc_r.c: 56: i2c_wb(0xD0);
  2255  057D  30D0               	movlw	208
  2256  057E  120A  118A  20E0  120A  118A  	fcall	_i2c_wb
  2257                           
  2258                           ;rtc_r.c: 57: i2c_wb(0);
  2259  0583  3000               	movlw	0
  2260  0584  120A  118A  20E0  120A  118A  	fcall	_i2c_wb
  2261                           
  2262                           ;rtc_r.c: 59: i2c_start();
  2263  0589  120A  158A  25D6  120A  118A  	fcall	_i2c_start
  2264                           
  2265                           ;rtc_r.c: 60: i2c_wb(0xD1);
  2266  058E  30D1               	movlw	209
  2267  058F  120A  118A  20E0  120A  118A  	fcall	_i2c_wb
  2268                           
  2269                           ;rtc_r.c: 61: tmp= 0x7F & i2c_rb(1);
  2270  0594  3001               	movlw	1
  2271  0595  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2272  059A  397F               	andlw	127
  2273  059B  00F5               	movwf	??_rtc_r
  2274  059C  0875               	movf	??_rtc_r,w
  2275  059D  00F6               	movwf	rtc_r@tmp
  2276                           
  2277                           ;rtc_r.c: 62: time[5]=':';
  2278  059E  303A               	movlw	58
  2279  059F  00F5               	movwf	??_rtc_r
  2280  05A0  0875               	movf	??_rtc_r,w
  2281  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  2282  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  2283  05A3  00E4               	movwf	_time+5	;volatile
  2284                           
  2285                           ;rtc_r.c: 63: time[6]=getd(tmp);
  2286  05A4  0876               	movf	rtc_r@tmp,w
  2287  05A5  120A  158A  25BB  120A  118A  	fcall	_getd
  2288  05AA  00F5               	movwf	??_rtc_r
  2289  05AB  0875               	movf	??_rtc_r,w
  2290  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  2291  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  2292  05AE  00E5               	movwf	_time+6	;volatile
  2293                           
  2294                           ;rtc_r.c: 64: time[7]=getu(tmp);
  2295  05AF  0876               	movf	rtc_r@tmp,w
  2296  05B0  120A  158A  257F  120A  118A  	fcall	_getu
  2297  05B5  00F5               	movwf	??_rtc_r
  2298  05B6  0875               	movf	??_rtc_r,w
  2299  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2300  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2301  05B9  00E6               	movwf	_time+7	;volatile
  2302                           
  2303                           ;rtc_r.c: 65: time[8]=0;
  2304  05BA  01E7               	clrf	_time+8	;volatile
  2305                           
  2306                           ;rtc_r.c: 67: tmp= 0x7F & i2c_rb(1);
  2307  05BB  3001               	movlw	1
  2308  05BC  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2309  05C1  397F               	andlw	127
  2310  05C2  00F5               	movwf	??_rtc_r
  2311  05C3  0875               	movf	??_rtc_r,w
  2312  05C4  00F6               	movwf	rtc_r@tmp
  2313                           
  2314                           ;rtc_r.c: 68: time[2]=':';
  2315  05C5  303A               	movlw	58
  2316  05C6  00F5               	movwf	??_rtc_r
  2317  05C7  0875               	movf	??_rtc_r,w
  2318  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  2319  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  2320  05CA  00E1               	movwf	_time+2	;volatile
  2321                           
  2322                           ;rtc_r.c: 69: time[3]=getd(tmp);
  2323  05CB  0876               	movf	rtc_r@tmp,w
  2324  05CC  120A  158A  25BB  120A  118A  	fcall	_getd
  2325  05D1  00F5               	movwf	??_rtc_r
  2326  05D2  0875               	movf	??_rtc_r,w
  2327  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2328  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2329  05D5  00E2               	movwf	_time+3	;volatile
  2330                           
  2331                           ;rtc_r.c: 70: time[4]=getu(tmp);
  2332  05D6  0876               	movf	rtc_r@tmp,w
  2333  05D7  120A  158A  257F  120A  118A  	fcall	_getu
  2334  05DC  00F5               	movwf	??_rtc_r
  2335  05DD  0875               	movf	??_rtc_r,w
  2336  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  2337  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  2338  05E0  00E3               	movwf	_time+4	;volatile
  2339                           
  2340                           ;rtc_r.c: 72: tmp= 0x3F & i2c_rb(1);
  2341  05E1  3001               	movlw	1
  2342  05E2  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2343  05E7  393F               	andlw	63
  2344  05E8  00F5               	movwf	??_rtc_r
  2345  05E9  0875               	movf	??_rtc_r,w
  2346  05EA  00F6               	movwf	rtc_r@tmp
  2347                           
  2348                           ;rtc_r.c: 73: time[0]=getd(tmp);
  2349  05EB  0876               	movf	rtc_r@tmp,w
  2350  05EC  120A  158A  25BB  120A  118A  	fcall	_getd
  2351  05F1  00F5               	movwf	??_rtc_r
  2352  05F2  0875               	movf	??_rtc_r,w
  2353  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2354  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2355  05F5  00DF               	movwf	_time	;volatile
  2356                           
  2357                           ;rtc_r.c: 74: time[1]=getu(tmp);
  2358  05F6  0876               	movf	rtc_r@tmp,w
  2359  05F7  120A  158A  257F  120A  118A  	fcall	_getu
  2360  05FC  00F5               	movwf	??_rtc_r
  2361  05FD  0875               	movf	??_rtc_r,w
  2362  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2363  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0600  00E0               	movwf	_time+1	;volatile
  2365                           
  2366                           ;rtc_r.c: 76: i2c_rb(1);
  2367  0601  3001               	movlw	1
  2368  0602  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2369                           
  2370                           ;rtc_r.c: 78: tmp= 0x3F & i2c_rb(1);
  2371  0607  3001               	movlw	1
  2372  0608  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2373  060D  393F               	andlw	63
  2374  060E  00F5               	movwf	??_rtc_r
  2375  060F  0875               	movf	??_rtc_r,w
  2376  0610  00F6               	movwf	rtc_r@tmp
  2377                           
  2378                           ;rtc_r.c: 79: date[0]=getd(tmp);
  2379  0611  0876               	movf	rtc_r@tmp,w
  2380  0612  120A  158A  25BB  120A  118A  	fcall	_getd
  2381  0617  00F5               	movwf	??_rtc_r
  2382  0618  0875               	movf	??_rtc_r,w
  2383  0619  1283               	bcf	3,5	;RP0=0, select bank0
  2384  061A  1303               	bcf	3,6	;RP1=0, select bank0
  2385  061B  00D5               	movwf	_date	;volatile
  2386                           
  2387                           ;rtc_r.c: 80: date[1]=getu(tmp);
  2388  061C  0876               	movf	rtc_r@tmp,w
  2389  061D  120A  158A  257F  120A  118A  	fcall	_getu
  2390  0622  00F5               	movwf	??_rtc_r
  2391  0623  0875               	movf	??_rtc_r,w
  2392  0624  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0625  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0626  00D6               	movwf	_date+1	;volatile
  2395                           
  2396                           ;rtc_r.c: 83: tmp= 0x1F & i2c_rb(1);
  2397  0627  3001               	movlw	1
  2398  0628  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2399  062D  391F               	andlw	31
  2400  062E  00F5               	movwf	??_rtc_r
  2401  062F  0875               	movf	??_rtc_r,w
  2402  0630  00F6               	movwf	rtc_r@tmp
  2403                           
  2404                           ;rtc_r.c: 84: date[2]='/';
  2405  0631  302F               	movlw	47
  2406  0632  00F5               	movwf	??_rtc_r
  2407  0633  0875               	movf	??_rtc_r,w
  2408  0634  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0635  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0636  00D7               	movwf	_date+2	;volatile
  2411                           
  2412                           ;rtc_r.c: 85: date[3]=getd(tmp);
  2413  0637  0876               	movf	rtc_r@tmp,w
  2414  0638  120A  158A  25BB  120A  118A  	fcall	_getd
  2415  063D  00F5               	movwf	??_rtc_r
  2416  063E  0875               	movf	??_rtc_r,w
  2417  063F  1283               	bcf	3,5	;RP0=0, select bank0
  2418  0640  1303               	bcf	3,6	;RP1=0, select bank0
  2419  0641  00D8               	movwf	_date+3	;volatile
  2420                           
  2421                           ;rtc_r.c: 86: date[4]=getu(tmp);
  2422  0642  0876               	movf	rtc_r@tmp,w
  2423  0643  120A  158A  257F  120A  118A  	fcall	_getu
  2424  0648  00F5               	movwf	??_rtc_r
  2425  0649  0875               	movf	??_rtc_r,w
  2426  064A  1283               	bcf	3,5	;RP0=0, select bank0
  2427  064B  1303               	bcf	3,6	;RP1=0, select bank0
  2428  064C  00D9               	movwf	_date+4	;volatile
  2429                           
  2430                           ;rtc_r.c: 88: tmp= i2c_rb(0);
  2431  064D  3000               	movlw	0
  2432  064E  120A  118A  21F5  120A  118A  	fcall	_i2c_rb
  2433  0653  00F5               	movwf	??_rtc_r
  2434  0654  0875               	movf	??_rtc_r,w
  2435  0655  00F6               	movwf	rtc_r@tmp
  2436                           
  2437                           ;rtc_r.c: 89: date[5]='/';
  2438  0656  302F               	movlw	47
  2439  0657  00F5               	movwf	??_rtc_r
  2440  0658  0875               	movf	??_rtc_r,w
  2441  0659  1283               	bcf	3,5	;RP0=0, select bank0
  2442  065A  1303               	bcf	3,6	;RP1=0, select bank0
  2443  065B  00DA               	movwf	_date+5	;volatile
  2444                           
  2445                           ;rtc_r.c: 90: date[6]=getd(tmp);
  2446  065C  0876               	movf	rtc_r@tmp,w
  2447  065D  120A  158A  25BB  120A  118A  	fcall	_getd
  2448  0662  00F5               	movwf	??_rtc_r
  2449  0663  0875               	movf	??_rtc_r,w
  2450  0664  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0665  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0666  00DB               	movwf	_date+6	;volatile
  2453                           
  2454                           ;rtc_r.c: 91: date[7]=getu(tmp);
  2455  0667  0876               	movf	rtc_r@tmp,w
  2456  0668  120A  158A  257F  120A  118A  	fcall	_getu
  2457  066D  00F5               	movwf	??_rtc_r
  2458  066E  0875               	movf	??_rtc_r,w
  2459  066F  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0670  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0671  00DC               	movwf	_date+7	;volatile
  2462                           
  2463                           ;rtc_r.c: 92: date[8]=0;
  2464  0672  01DD               	clrf	_date+8	;volatile
  2465                           
  2466                           ;rtc_r.c: 94: i2c_stop();
  2467  0673  120A  158A  25E6   	fcall	_i2c_stop
  2468  0676  0008               	return
  2469  0677                     __end_of_rtc_r:	
  2470                           
  2471                           	psect	text6
  2472  00E0                     __ptext6:	
  2473 ;; *************** function _i2c_wb *****************
  2474 ;; Defined at:
  2475 ;;		line 69 in file "i2c.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  val             1    wreg     unsigned char 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  val             1    2[COMMON] unsigned char 
  2480 ;;  i               1    3[COMMON] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2490 ;;      Params:         0       0       0       0       0
  2491 ;;      Locals:         2       0       0       0       0
  2492 ;;      Temps:          2       0       0       0       0
  2493 ;;      Totals:         4       0       0       0       0
  2494 ;;Total ram usage:        4 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    1
  2497 ;; This function calls:
  2498 ;;		_delay
  2499 ;; This function is called by:
  2500 ;;		_rtc_r
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           
  2505                           ;psect for function _i2c_wb
  2506  00E0                     _i2c_wb:	
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _i2c_wb: [wreg+status,2+status,0+pclath+cstack]
  2510                           ;i2c_wb@val stored from wreg
  2511  00E0  00F2               	movwf	i2c_wb@val
  2512                           
  2513                           ;i2c.c: 71: unsigned char i;
  2514                           ;i2c.c: 72: PORTCbits.RC3=0;
  2515  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2516  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2517  00E3  1187               	bcf	7,3	;volatile
  2518                           
  2519                           ;i2c.c: 73: for(i=0;i<8;i++)
  2520  00E4  01F3               	clrf	i2c_wb@i
  2521  00E5  3008               	movlw	8
  2522  00E6  0273               	subwf	i2c_wb@i,w
  2523  00E7  1803               	btfsc	3,0
  2524  00E8  290F               	goto	l252
  2525  00E9                     l1310:	
  2526                           
  2527                           ;i2c.c: 74: {
  2528                           ;i2c.c: 75: PORTCbits.RC4=((val>>(7-i))& 0x01);
  2529  00E9  0872               	movf	i2c_wb@val,w
  2530  00EA  00F0               	movwf	??_i2c_wb
  2531  00EB  0373               	decf	i2c_wb@i,w
  2532  00EC  3AFF               	xorlw	255
  2533  00ED  3E07               	addlw	7
  2534  00EE  3E01               	addlw	1
  2535  00EF  28F2               	goto	u914
  2536  00F0                     u915:	
  2537  00F0  1003               	clrc
  2538  00F1  0CF0               	rrf	??_i2c_wb,f
  2539  00F2                     u914:	
  2540  00F2  3EFF               	addlw	-1
  2541  00F3  1D03               	skipz
  2542  00F4  28F0               	goto	u915
  2543  00F5  0870               	movf	??_i2c_wb,w
  2544  00F6  3901               	andlw	1
  2545  00F7  00F1               	movwf	??_i2c_wb+1
  2546  00F8  0EF1               	swapf	??_i2c_wb+1,f
  2547  00F9  0807               	movf	7,w	;volatile
  2548  00FA  0671               	xorwf	??_i2c_wb+1,w
  2549  00FB  39EF               	andlw	-17
  2550  00FC  0671               	xorwf	??_i2c_wb+1,w
  2551  00FD  0087               	movwf	7	;volatile
  2552                           
  2553                           ;i2c.c: 76: PORTCbits.RC3=1;
  2554  00FE  1587               	bsf	7,3	;volatile
  2555                           
  2556                           ;i2c.c: 77: delay();
  2557  00FF  120A  158A  2592  120A  118A  	fcall	_delay
  2558                           
  2559                           ;i2c.c: 78: PORTCbits.RC3=0;
  2560  0104  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0105  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0106  1187               	bcf	7,3	;volatile
  2563  0107  3001               	movlw	1
  2564  0108  00F0               	movwf	??_i2c_wb
  2565  0109  0870               	movf	??_i2c_wb,w
  2566  010A  07F3               	addwf	i2c_wb@i,f
  2567  010B  3008               	movlw	8
  2568  010C  0273               	subwf	i2c_wb@i,w
  2569  010D  1C03               	skipc
  2570  010E  28E9               	goto	l1310
  2571  010F                     l252:	
  2572                           
  2573                           ;i2c.c: 79: }
  2574                           ;i2c.c: 80: PORTCbits.RC4=1;
  2575  010F  1607               	bsf	7,4	;volatile
  2576                           
  2577                           ;i2c.c: 81: delay();
  2578  0110  120A  158A  2592  120A  118A  	fcall	_delay
  2579                           
  2580                           ;i2c.c: 82: PORTCbits.RC3=1;
  2581  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0116  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0117  1587               	bsf	7,3	;volatile
  2584                           
  2585                           ;i2c.c: 83: delay();
  2586  0118  120A  158A  2592   	fcall	_delay
  2587                           
  2588                           ;i2c.c: 84: PORTCbits.RC3=0;
  2589  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2590  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2591  011D  1187               	bcf	7,3	;volatile
  2592  011E  0008               	return
  2593  011F                     __end_of_i2c_wb:	
  2594                           
  2595                           	psect	text7
  2596  0DE6                     __ptext7:	
  2597 ;; *************** function _i2c_stop *****************
  2598 ;; Defined at:
  2599 ;;		line 60 in file "i2c.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		status,2, status,0, pclath, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2613 ;;      Params:         0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0
  2616 ;;      Totals:         0       0       0       0       0
  2617 ;;Total ram usage:        0 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    1
  2620 ;; This function calls:
  2621 ;;		_delay
  2622 ;; This function is called by:
  2623 ;;		_rtc_r
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function _i2c_stop
  2629  0DE6                     _i2c_stop:	
  2630                           
  2631                           ;i2c.c: 62: PORTCbits.RC3=1;
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _i2c_stop: [status,2+status,0+pclath+cstack]
  2635  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  2636  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  2637  0DE8  1587               	bsf	7,3	;volatile
  2638                           
  2639                           ;i2c.c: 63: PORTCbits.RC4=0;
  2640  0DE9  1207               	bcf	7,4	;volatile
  2641                           
  2642                           ;i2c.c: 64: delay();
  2643  0DEA  120A  158A  2592  120A  158A  	fcall	_delay
  2644                           
  2645                           ;i2c.c: 65: PORTCbits.RC4=1;
  2646  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0DF1  1607               	bsf	7,4	;volatile
  2649                           
  2650                           ;i2c.c: 66: delay();
  2651  0DF2  120A  158A  2592   	fcall	_delay
  2652  0DF5  0008               	return
  2653  0DF6                     __end_of_i2c_stop:	
  2654                           
  2655                           	psect	text8
  2656  0DD6                     __ptext8:	
  2657 ;; *************** function _i2c_start *****************
  2658 ;; Defined at:
  2659 ;;		line 51 in file "i2c.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2673 ;;      Params:         0       0       0       0       0
  2674 ;;      Locals:         0       0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0
  2676 ;;      Totals:         0       0       0       0       0
  2677 ;;Total ram usage:        0 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    1
  2680 ;; This function calls:
  2681 ;;		_delay
  2682 ;; This function is called by:
  2683 ;;		_rtc_r
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           
  2688                           ;psect for function _i2c_start
  2689  0DD6                     _i2c_start:	
  2690                           
  2691                           ;i2c.c: 53: PORTCbits.RC3=1;
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _i2c_start: [status,2+status,0+pclath+cstack]
  2695  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0DD8  1587               	bsf	7,3	;volatile
  2698                           
  2699                           ;i2c.c: 54: PORTCbits.RC4=1;
  2700  0DD9  1607               	bsf	7,4	;volatile
  2701                           
  2702                           ;i2c.c: 55: delay();
  2703  0DDA  120A  158A  2592  120A  158A  	fcall	_delay
  2704                           
  2705                           ;i2c.c: 56: PORTCbits.RC4=0;
  2706  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0DE1  1207               	bcf	7,4	;volatile
  2709                           
  2710                           ;i2c.c: 57: delay();
  2711  0DE2  120A  158A  2592   	fcall	_delay
  2712  0DE5  0008               	return
  2713  0DE6                     __end_of_i2c_start:	
  2714                           
  2715                           	psect	text9
  2716  01F5                     __ptext9:	
  2717 ;; *************** function _i2c_rb *****************
  2718 ;; Defined at:
  2719 ;;		line 87 in file "i2c.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  ack             1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  ack             1    2[COMMON] unsigned char 
  2724 ;;  i               1    4[COMMON] unsigned char 
  2725 ;;  ret             1    3[COMMON] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      unsigned char 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, status,0, pclath, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2735 ;;      Params:         0       0       0       0       0
  2736 ;;      Locals:         3       0       0       0       0
  2737 ;;      Temps:          2       0       0       0       0
  2738 ;;      Totals:         5       0       0       0       0
  2739 ;;Total ram usage:        5 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    1
  2742 ;; This function calls:
  2743 ;;		_delay
  2744 ;; This function is called by:
  2745 ;;		_rtc_r
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _i2c_rb
  2751  01F5                     _i2c_rb:	
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _i2c_rb: [wreg+status,2+status,0+pclath+cstack]
  2755                           ;i2c_rb@ack stored from wreg
  2756  01F5  00F2               	movwf	i2c_rb@ack
  2757                           
  2758                           ;i2c.c: 89: char i;
  2759                           ;i2c.c: 90: unsigned char ret=0;
  2760  01F6  01F3               	clrf	i2c_rb@ret
  2761                           
  2762                           ;i2c.c: 92: PORTCbits.RC3=0;
  2763  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2764  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2765  01F9  1187               	bcf	7,3	;volatile
  2766                           
  2767                           ;i2c.c: 93: TRISCbits.TRISC4=1;
  2768  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2769  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  2770  01FC  1607               	bsf	7,4	;volatile
  2771                           
  2772                           ;i2c.c: 94: PORTCbits.RC4=1;
  2773  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2774  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2775  01FF  1607               	bsf	7,4	;volatile
  2776                           
  2777                           ;i2c.c: 95: for(i=0;i<8;i++)
  2778  0200  01F4               	clrf	i2c_rb@i
  2779  0201  3008               	movlw	8
  2780  0202  0274               	subwf	i2c_rb@i,w
  2781  0203  1803               	btfsc	3,0
  2782  0204  2A27               	goto	l257
  2783  0205                     l256:	
  2784                           
  2785                           ;i2c.c: 96: {
  2786                           ;i2c.c: 97: PORTCbits.RC3=1;
  2787  0205  1587               	bsf	7,3	;volatile
  2788                           
  2789                           ;i2c.c: 98: delay();
  2790  0206  120A  158A  2592  120A  118A  	fcall	_delay
  2791                           
  2792                           ;i2c.c: 99: ret|=(PORTCbits.RC4<<(7-i));
  2793  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2794  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2795  020D  0E07               	swapf	7,w	;volatile
  2796  020E  3901               	andlw	1
  2797  020F  00F0               	movwf	??_i2c_rb
  2798  0210  0374               	decf	i2c_rb@i,w
  2799  0211  3AFF               	xorlw	255
  2800  0212  3E07               	addlw	7
  2801  0213  3E01               	addlw	1
  2802  0214  2A17               	goto	u944
  2803  0215                     u945:	
  2804  0215  1003               	clrc
  2805  0216  0DF0               	rlf	??_i2c_rb,f
  2806  0217                     u944:	
  2807  0217  3EFF               	addlw	-1
  2808  0218  1D03               	skipz
  2809  0219  2A15               	goto	u945
  2810  021A  0870               	movf	??_i2c_rb,w
  2811  021B  00F1               	movwf	??_i2c_rb+1
  2812  021C  0871               	movf	??_i2c_rb+1,w
  2813  021D  04F3               	iorwf	i2c_rb@ret,f
  2814                           
  2815                           ;i2c.c: 100: PORTCbits.RC3=0;
  2816  021E  1187               	bcf	7,3	;volatile
  2817  021F  3001               	movlw	1
  2818  0220  00F0               	movwf	??_i2c_rb
  2819  0221  0870               	movf	??_i2c_rb,w
  2820  0222  07F4               	addwf	i2c_rb@i,f
  2821  0223  3008               	movlw	8
  2822  0224  0274               	subwf	i2c_rb@i,w
  2823  0225  1C03               	skipc
  2824  0226  2A05               	goto	l256
  2825  0227                     l257:	
  2826                           
  2827                           ;i2c.c: 101: }
  2828                           ;i2c.c: 102: TRISCbits.TRISC4=0;
  2829  0227  1683               	bsf	3,5	;RP0=1, select bank1
  2830  0228  1303               	bcf	3,6	;RP1=0, select bank1
  2831  0229  1207               	bcf	7,4	;volatile
  2832                           
  2833                           ;i2c.c: 103: if(ack)
  2834  022A  0872               	movf	i2c_rb@ack,w
  2835  022B  1903               	btfsc	3,2
  2836  022C  2A31               	goto	l258
  2837                           
  2838                           ;i2c.c: 104: PORTCbits.RC4=0;
  2839  022D  1283               	bcf	3,5	;RP0=0, select bank0
  2840  022E  1303               	bcf	3,6	;RP1=0, select bank0
  2841  022F  1207               	bcf	7,4	;volatile
  2842  0230  2A34               	goto	l1354
  2843  0231                     l258:	
  2844                           
  2845                           ;i2c.c: 105: else
  2846                           ;i2c.c: 106: PORTCbits.RC4=1;
  2847  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0233  1607               	bsf	7,4	;volatile
  2850  0234                     l1354:	
  2851                           
  2852                           ;i2c.c: 107: delay();
  2853  0234  120A  158A  2592  120A  118A  	fcall	_delay
  2854                           
  2855                           ;i2c.c: 108: PORTCbits.RC3=1;
  2856  0239  1283               	bcf	3,5	;RP0=0, select bank0
  2857  023A  1303               	bcf	3,6	;RP1=0, select bank0
  2858  023B  1587               	bsf	7,3	;volatile
  2859                           
  2860                           ;i2c.c: 109: delay();
  2861  023C  120A  158A  2592   	fcall	_delay
  2862                           
  2863                           ;i2c.c: 110: PORTCbits.RC3=0;
  2864  023F  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0240  1303               	bcf	3,6	;RP1=0, select bank0
  2866  0241  1187               	bcf	7,3	;volatile
  2867                           
  2868                           ;i2c.c: 112: return ret;
  2869  0242  0873               	movf	i2c_rb@ret,w
  2870  0243  0008               	return
  2871  0244                     __end_of_i2c_rb:	
  2872                           
  2873                           	psect	text10
  2874  0D92                     __ptext10:	
  2875 ;; *************** function _delay *****************
  2876 ;; Defined at:
  2877 ;;		line 30 in file "i2c.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		None
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2891 ;;      Params:         0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_i2c_start
  2901 ;;		_i2c_stop
  2902 ;;		_i2c_wb
  2903 ;;		_i2c_rb
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _delay
  2909  0D92                     _delay:	
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _delay: []
  2913  0D92  0000               	nop	;# 
  2914  0D93  0000               	nop	;# 
  2915  0D94  0000               	nop	;# 
  2916  0D95  0000               	nop	;# 
  2917  0D96  0000               	nop	;# 
  2918  0D97  0000               	nop	;# 
  2919  0D98  0000               	nop	;# 
  2920  0D99  0000               	nop	;# 
  2921  0D9A  0008               	return
  2922  0D9B                     __end_of_delay:	
  2923                           
  2924                           	psect	text11
  2925  0D7F                     __ptext11:	
  2926 ;; *************** function _getu *****************
  2927 ;; Defined at:
  2928 ;;		line 45 in file "rtc_r.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  nn              1    wreg     unsigned char 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  nn              1    0[COMMON] unsigned char 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      unsigned char 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2942 ;;      Params:         0       0       0       0       0
  2943 ;;      Locals:         1       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0
  2945 ;;      Totals:         1       0       0       0       0
  2946 ;;Total ram usage:        1 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_rtc_r
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _getu
  2957  0D7F                     _getu:	
  2958                           
  2959                           ;incstack = 0
  2960                           ; Regs used in _getu: [wreg+status,2+status,0]
  2961                           ;getu@nn stored from wreg
  2962  0D7F  00F0               	movwf	getu@nn
  2963                           
  2964                           ;rtc_r.c: 47: return (nn & 0x0F)+0x30;
  2965  0D80  0870               	movf	getu@nn,w
  2966  0D81  390F               	andlw	15
  2967  0D82  3E30               	addlw	48
  2968  0D83  0008               	return
  2969  0D84                     __end_of_getu:	
  2970                           
  2971                           	psect	text12
  2972  0DBB                     __ptext12:	
  2973 ;; *************** function _getd *****************
  2974 ;; Defined at:
  2975 ;;		line 40 in file "rtc_r.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  nn              1    wreg     unsigned char 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  nn              1    1[COMMON] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      unsigned char 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2989 ;;      Params:         0       0       0       0       0
  2990 ;;      Locals:         1       0       0       0       0
  2991 ;;      Temps:          1       0       0       0       0
  2992 ;;      Totals:         2       0       0       0       0
  2993 ;;Total ram usage:        2 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_rtc_r
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _getd
  3004  0DBB                     _getd:	
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _getd: [wreg+status,2+status,0]
  3008                           ;getd@nn stored from wreg
  3009  0DBB  00F1               	movwf	getd@nn
  3010                           
  3011                           ;rtc_r.c: 42: return ((nn & 0xF0)>>4)+0x30;
  3012  0DBC  0871               	movf	getd@nn,w
  3013  0DBD  00F0               	movwf	??_getd
  3014  0DBE  3004               	movlw	4
  3015  0DBF                     u895:	
  3016  0DBF  1003               	clrc
  3017  0DC0  0CF0               	rrf	??_getd,f
  3018  0DC1  3EFF               	addlw	-1
  3019  0DC2  1D03               	skipz
  3020  0DC3  2DBF               	goto	u895
  3021  0DC4  0870               	movf	??_getd,w
  3022  0DC5  390F               	andlw	15
  3023  0DC6  3E30               	addlw	48
  3024  0DC7  0008               	return
  3025  0DC8                     __end_of_getd:	
  3026                           
  3027                           	psect	text13
  3028  0391                     __ptext13:	
  3029 ;; *************** function _print *****************
  3030 ;; Defined at:
  3031 ;;		line 36 in file "snake.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  s               1    wreg     PTR struct .
  3034 ;;		 -> main@s(74), 
  3035 ;;  field           1   13[COMMON] PTR unsigned char [17]
  3036 ;;		 -> main@field(34), 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  s               1    7[BANK0 ] PTR struct .
  3039 ;;		 -> main@s(74), 
  3040 ;;  i               2   10[BANK0 ] int 
  3041 ;;  j               2    8[BANK0 ] int 
  3042 ;;  head            1    6[BANK0 ] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3052 ;;      Params:         1       0       0       0       0
  3053 ;;      Locals:         0       6       0       0       0
  3054 ;;      Temps:          0       3       0       0       0
  3055 ;;      Totals:         1       9       0       0       0
  3056 ;;Total ram usage:       10 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    2
  3059 ;; This function calls:
  3060 ;;		_front
  3061 ;;		_newPair
  3062 ;; This function is called by:
  3063 ;;		_main
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _print
  3069  0391                     _print:	
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3073                           ;print@s stored from wreg
  3074  0391  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0392  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0393  00A7               	movwf	print@s
  3077                           
  3078                           ;snake.c: 37: Pair head = front(&(s->q));
  3079  0394  0827               	movf	print@s,w
  3080  0395  3E20               	addlw	32
  3081  0396  120A  118A  2065  120A  118A  	fcall	_front
  3082  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3083  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3084  039D  00A3               	movwf	??_print
  3085  039E  0823               	movf	??_print,w
  3086  039F  00A6               	movwf	print@head
  3087                           
  3088                           ;snake.c: 38: int i, j;
  3089                           ;snake.c: 39: for (i = 0; i < 2; i++){
  3090  03A0  01AA               	clrf	print@i
  3091  03A1  01AB               	clrf	print@i+1
  3092  03A2                     L8:	
  3093  03A2  082B               	movf	print@i+1,w
  3094  03A3  3A80               	xorlw	128
  3095  03A4  00FF               	movwf	127
  3096  03A5  3080               	movlw	128
  3097  03A6  027F               	subwf	127,w
  3098  03A7  1D03               	skipz
  3099  03A8  2BAB               	goto	u1355
  3100  03A9  3002               	movlw	2
  3101  03AA  022A               	subwf	print@i,w
  3102  03AB                     u1355:	
  3103  03AB  1803               	btfsc	3,0
  3104  03AC  0008               	return
  3105                           
  3106                           ;snake.c: 40: for (j = 0; j < 16; j++){
  3107  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  3108  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  3109  03AF  01A8               	clrf	print@j
  3110  03B0  01A9               	clrf	print@j+1
  3111  03B1  2BDE               	goto	L7
  3112  03B2                     l1654:	
  3113                           ;snake.c: 42: case 0:{
  3114                           
  3115                           ;snake.c: 41: switch (s->field[i][j]){
  3116                           
  3117                           
  3118                           ;snake.c: 43: field[i][j] = ' ';
  3119  03B2  3020               	movlw	32
  3120  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3121  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3122  03B5  2BCA               	goto	L6
  3123  03B6                     l1656:	
  3124                           ;snake.c: 45: case 1:{
  3125                           
  3126                           ;snake.c: 44: } break;
  3127                           
  3128                           
  3129                           ;snake.c: 46: if (head == newPair(i, j))
  3130  03B6  0828               	movf	print@j,w
  3131  03B7  00A3               	movwf	??_print
  3132  03B8  0823               	movf	??_print,w
  3133  03B9  00F0               	movwf	newPair@j
  3134  03BA  082A               	movf	print@i,w
  3135  03BB  120A  158A  25AF  120A  118A  	fcall	_newPair
  3136  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3137  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3138  03C2  0626               	xorwf	print@head,w
  3139  03C3  1D03               	skipz
  3140  03C4  2BC7               	goto	l1660
  3141                           
  3142                           ;snake.c: 47: field[i][j] = '*';
  3143  03C5  302A               	movlw	42
  3144  03C6  2BCA               	goto	L6
  3145  03C7                     l1660:	
  3146                           
  3147                           ;snake.c: 48: else
  3148                           ;snake.c: 49: field[i][j] = '+';
  3149  03C7  302B               	movlw	43
  3150  03C8  2BCA               	goto	L6
  3151  03C9                     l1662:	
  3152                           ;snake.c: 51: case 2:{
  3153                           
  3154                           ;snake.c: 50: } break;
  3155                           
  3156                           
  3157                           ;snake.c: 52: field[i][j] = 'x';
  3158  03C9  3078               	movlw	120
  3159  03CA                     L6:	
  3160  03CA  00A3               	movwf	??_print
  3161  03CB  0E2A               	swapf	print@i,w
  3162  03CC  39F0               	andlw	240
  3163  03CD  072A               	addwf	print@i,w
  3164  03CE  077D               	addwf	print@field,w
  3165  03CF  00A4               	movwf	??_print+1
  3166  03D0  0828               	movf	print@j,w
  3167  03D1  0724               	addwf	??_print+1,w
  3168  03D2  00A5               	movwf	??_print+2
  3169  03D3  0825               	movf	??_print+2,w
  3170  03D4  0084               	movwf	4
  3171  03D5  0823               	movf	??_print,w
  3172  03D6  1383               	bcf	3,7	;select IRP bank0
  3173  03D7  0080               	movwf	0
  3174  03D8                     l1668:	
  3175                           ;snake.c: 54: }
  3176                           
  3177                           ;snake.c: 53: } break;
  3178                           
  3179  03D8  3001               	movlw	1
  3180  03D9  07A8               	addwf	print@j,f
  3181  03DA  1803               	skipnc
  3182  03DB  0AA9               	incf	print@j+1,f
  3183  03DC  3000               	movlw	0
  3184  03DD  07A9               	addwf	print@j+1,f
  3185  03DE                     L7:	
  3186  03DE  0829               	movf	print@j+1,w
  3187  03DF  3A80               	xorlw	128
  3188  03E0  00FF               	movwf	127
  3189  03E1  3080               	movlw	128
  3190  03E2  027F               	subwf	127,w
  3191  03E3  1D03               	skipz
  3192  03E4  2BE7               	goto	u1395
  3193  03E5  3010               	movlw	16
  3194  03E6  0228               	subwf	print@j,w
  3195  03E7                     u1395:	
  3196  03E7  1803               	btfsc	3,0
  3197  03E8  2C09               	goto	l1672
  3198  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  3199  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  3200  03EB  082A               	movf	print@i,w
  3201  03EC  00A3               	movwf	??_print
  3202  03ED  3003               	movlw	3
  3203  03EE                     u1385:	
  3204  03EE  1003               	clrc
  3205  03EF  0DA3               	rlf	??_print,f
  3206  03F0  3EFF               	addlw	-1
  3207  03F1  1D03               	skipz
  3208  03F2  2BEE               	goto	u1385
  3209  03F3  1003               	clrc
  3210  03F4  0D23               	rlf	??_print,w
  3211  03F5  0727               	addwf	print@s,w
  3212  03F6  00A4               	movwf	??_print+1
  3213  03F7  0828               	movf	print@j,w
  3214  03F8  0724               	addwf	??_print+1,w
  3215  03F9  00A5               	movwf	??_print+2
  3216  03FA  0825               	movf	??_print+2,w
  3217  03FB  0084               	movwf	4
  3218  03FC  1783               	bsf	3,7	;select IRP bank2
  3219  03FD  0800               	movf	0,w
  3220                           
  3221                           ; Switch size 1, requested type "space"
  3222                           ; Number of cases is 3, Range of values is 0 to 2
  3223                           ; switch strategies available:
  3224                           ; Name         Instructions Cycles
  3225                           ; simple_byte           10     6 (average)
  3226                           ; direct_byte           17     8 (fixed)
  3227                           ; jumptable            260     6 (fixed)
  3228                           ;	Chosen strategy is simple_byte
  3229  03FE  3A00               	xorlw	0	; case 0
  3230  03FF  1903               	skipnz
  3231  0400  2BB2               	goto	l1654
  3232  0401  3A01               	xorlw	1	; case 1
  3233  0402  1903               	skipnz
  3234  0403  2BB6               	goto	l1656
  3235  0404  3A03               	xorlw	3	; case 2
  3236  0405  1903               	skipnz
  3237  0406  2BC9               	goto	l1662
  3238  0407  2BD8               	goto	l1668
  3239  0408  2BD8               	goto	l1668
  3240  0409                     l1672:	
  3241                           
  3242                           ;snake.c: 55: }
  3243                           ;snake.c: 56: field[i][16] = 0;
  3244  0409  1283               	bcf	3,5	;RP0=0, select bank0
  3245  040A  1303               	bcf	3,6	;RP1=0, select bank0
  3246  040B  0E2A               	swapf	print@i,w
  3247  040C  39F0               	andlw	240
  3248  040D  072A               	addwf	print@i,w
  3249  040E  077D               	addwf	print@field,w
  3250  040F  00A3               	movwf	??_print
  3251  0410  0823               	movf	??_print,w
  3252  0411  3E10               	addlw	16
  3253  0412  0084               	movwf	4
  3254  0413  1383               	bcf	3,7	;select IRP bank0
  3255  0414  0180               	clrf	0
  3256  0415  3001               	movlw	1
  3257  0416  07AA               	addwf	print@i,f
  3258  0417  1803               	skipnc
  3259  0418  0AAB               	incf	print@i+1,f
  3260  0419  3000               	movlw	0
  3261  041A  07AB               	addwf	print@i+1,f
  3262  041B  2BA2               	goto	L8
  3263  041C                     __end_of_print:	
  3264                           
  3265                           	psect	text14
  3266  0DA4                     __ptext14:	
  3267 ;; *************** function _points *****************
  3268 ;; Defined at:
  3269 ;;		line 104 in file "snake.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  s               1    wreg     PTR struct .
  3272 ;;		 -> main@s(74), 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  s               1    3[COMMON] PTR struct .
  3275 ;;		 -> main@s(74), 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  2    0[COMMON] int 
  3278 ;; Registers used:
  3279 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3285 ;;      Params:         3       0       0       0       0
  3286 ;;      Locals:         1       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0
  3288 ;;      Totals:         4       0       0       0       0
  3289 ;;Total ram usage:        4 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           
  3299                           ;psect for function _points
  3300  0DA4                     _points:	
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _points: [wreg-fsr0h+status,2+status,0]
  3304                           ;points@s stored from wreg
  3305  0DA4  00F3               	movwf	points@s
  3306                           
  3307                           ;snake.c: 105: return s->q.size;
  3308  0DA5  0873               	movf	points@s,w
  3309  0DA6  3E22               	addlw	34
  3310  0DA7  0084               	movwf	4
  3311  0DA8  1783               	bsf	3,7	;select IRP bank2
  3312  0DA9  0800               	movf	0,w
  3313  0DAA  00F0               	movwf	?_points
  3314  0DAB  0A84               	incf	4,f
  3315  0DAC  0800               	movf	0,w
  3316  0DAD  00F1               	movwf	?_points+1
  3317  0DAE  0008               	return
  3318  0DAF                     __end_of_points:	
  3319                           
  3320                           	psect	text15
  3321  04AD                     __ptext15:	
  3322 ;; *************** function _move *****************
  3323 ;; Defined at:
  3324 ;;		line 60 in file "snake.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  s               1    wreg     PTR struct .
  3327 ;;		 -> main@s(74), 
  3328 ;;  direction       1   16[BANK0 ] unsigned char 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  s               1   23[BANK0 ] PTR struct .
  3331 ;;		 -> main@s(74), 
  3332 ;;  newPosition     1   22[BANK0 ] unsigned char 
  3333 ;;  lastPosition    1   21[BANK0 ] unsigned char 
  3334 ;;  head            1   20[BANK0 ] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3344 ;;      Params:         0       1       0       0       0
  3345 ;;      Locals:         0       4       0       0       0
  3346 ;;      Temps:          0       3       0       0       0
  3347 ;;      Totals:         0       8       0       0       0
  3348 ;;Total ram usage:        8 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    4
  3351 ;; This function calls:
  3352 ;;		_back
  3353 ;;		_front
  3354 ;;		_getI
  3355 ;;		_getJ
  3356 ;;		_increment
  3357 ;;		_isFood
  3358 ;;		_isSet
  3359 ;;		_makeFood
  3360 ;;		_pop
  3361 ;;		_set
  3362 ;;		_won
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _move
  3370  04AD                     _move:	
  3371                           
  3372                           ;incstack = 0
  3373                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3374                           ;move@s stored from wreg
  3375  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3376  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3377  04AF  00B7               	movwf	move@s
  3378                           
  3379                           ;snake.c: 61: Pair head = front(&(s->q));
  3380  04B0  0837               	movf	move@s,w
  3381  04B1  3E20               	addlw	32
  3382  04B2  120A  118A  2065  120A  118A  	fcall	_front
  3383  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  3384  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  3385  04B9  00B1               	movwf	??_move
  3386  04BA  0831               	movf	??_move,w
  3387  04BB  00B4               	movwf	move@head
  3388                           
  3389                           ;snake.c: 62: Pair newPosition;
  3390                           ;snake.c: 63: switch (direction){
  3391  04BC  2CE2               	goto	l1690
  3392  04BD                     l1680:	
  3393                           ;snake.c: 64: case 0:{
  3394                           
  3395                           
  3396                           ;snake.c: 65: newPosition = increment(newPosition, 0, -1);
  3397  04BD  01FC               	clrf	increment@i
  3398  04BE  30FF               	movlw	255
  3399  04BF  00B1               	movwf	??_move
  3400  04C0  0831               	movf	??_move,w
  3401  04C1  00FD               	movwf	increment@j
  3402  04C2  0836               	movf	move@newPosition,w
  3403  04C3  120A  158A  26BE  120A  118A  	fcall	_increment
  3404  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3405  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  3406  04CA  00B2               	movwf	??_move+1
  3407  04CB  0832               	movf	??_move+1,w
  3408  04CC  2CE0               	goto	L11
  3409  04CD                     l1682:	
  3410                           ;snake.c: 67: case 1:{
  3411                           
  3412                           ;snake.c: 66: } break;
  3413                           
  3414                           
  3415                           ;snake.c: 68: newPosition = increment(newPosition, 1, 0);
  3416  04CD  01FC               	clrf	increment@i
  3417  04CE  0AFC               	incf	increment@i,f
  3418  04CF  01FD               	clrf	increment@j
  3419  04D0  2CD4               	goto	L14
  3420  04D1                     l1684:	
  3421                           ;snake.c: 70: case 2:{
  3422                           
  3423                           ;snake.c: 69: } break;
  3424                           
  3425                           
  3426                           ;snake.c: 71: newPosition = increment(newPosition, 0, 1);
  3427  04D1  01FC               	clrf	increment@i
  3428  04D2  01FD               	clrf	increment@j
  3429  04D3  0AFD               	incf	increment@j,f
  3430  04D4                     L14:	
  3431  04D4  0836               	movf	move@newPosition,w
  3432  04D5  120A  158A  26BE  120A  118A  	fcall	_increment
  3433  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3434  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3435  04DC  2CDE               	goto	L12
  3436  04DD                     l1686:	
  3437                           ;snake.c: 73: default:{
  3438                           
  3439                           ;snake.c: 72: } break;
  3440                           
  3441                           
  3442                           ;snake.c: 74: newPosition = head;
  3443  04DD  0834               	movf	move@head,w
  3444  04DE                     L12:	
  3445  04DE  00B1               	movwf	??_move
  3446  04DF  0831               	movf	??_move,w
  3447  04E0                     L11:	
  3448  04E0  00B6               	movwf	move@newPosition
  3449                           
  3450                           ;snake.c: 76: }
  3451                           
  3452                           ;snake.c: 75: } break;
  3453  04E1  2CED               	goto	l1692
  3454  04E2                     l1690:	
  3455  04E2  0830               	movf	move@direction,w
  3456                           
  3457                           ; Switch size 1, requested type "space"
  3458                           ; Number of cases is 3, Range of values is 0 to 2
  3459                           ; switch strategies available:
  3460                           ; Name         Instructions Cycles
  3461                           ; simple_byte           10     6 (average)
  3462                           ; direct_byte           17     8 (fixed)
  3463                           ; jumptable            260     6 (fixed)
  3464                           ;	Chosen strategy is simple_byte
  3465  04E3  3A00               	xorlw	0	; case 0
  3466  04E4  1903               	skipnz
  3467  04E5  2CBD               	goto	l1680
  3468  04E6  3A01               	xorlw	1	; case 1
  3469  04E7  1903               	skipnz
  3470  04E8  2CCD               	goto	l1682
  3471  04E9  3A03               	xorlw	3	; case 2
  3472  04EA  1903               	skipnz
  3473  04EB  2CD1               	goto	l1684
  3474  04EC  2CDD               	goto	l1686
  3475  04ED                     l1692:	
  3476                           
  3477                           ;snake.c: 77: Pair lastPosition = back(&(s->q));
  3478  04ED  0837               	movf	move@s,w
  3479  04EE  3E20               	addlw	32
  3480  04EF  120A  158A  2634  120A  118A  	fcall	_back
  3481  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  3482  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  3483  04F6  00B1               	movwf	??_move
  3484  04F7  0831               	movf	??_move,w
  3485  04F8  00B5               	movwf	move@lastPosition
  3486                           
  3487                           ;snake.c: 78: if (isSet(s, newPosition) && (newPosition != lastPosition)){
  3488  04F9  0836               	movf	move@newPosition,w
  3489  04FA  00B1               	movwf	??_move
  3490  04FB  0831               	movf	??_move,w
  3491  04FC  00FC               	movwf	isSet@p
  3492  04FD  0837               	movf	move@s,w
  3493  04FE  120A  158A  276B  120A  118A  	fcall	_isSet
  3494  0503  087C               	movf	?_isSet,w
  3495  0504  047D               	iorwf	?_isSet+1,w
  3496  0505  1903               	btfsc	3,2
  3497  0506  2D14               	goto	l1698
  3498  0507  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0508  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0509  0836               	movf	move@newPosition,w
  3501  050A  0635               	xorwf	move@lastPosition,w
  3502  050B  1903               	skipnz
  3503  050C  2D14               	goto	l1698
  3504                           
  3505                           ;snake.c: 79: s->fail = 1;
  3506  050D  0837               	movf	move@s,w
  3507  050E  3E49               	addlw	73
  3508  050F  0084               	movwf	4
  3509  0510  1783               	bsf	3,7	;select IRP bank2
  3510  0511  0180               	clrf	0
  3511  0512  0A80               	incf	0,f
  3512                           
  3513                           ;snake.c: 80: }
  3514  0513  0008               	return
  3515  0514                     l1698:	
  3516                           
  3517                           ;snake.c: 81: else{
  3518                           ;snake.c: 82: if (!isFood(s, newPosition)){
  3519  0514  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0515  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0516  0836               	movf	move@newPosition,w
  3522  0517  00B1               	movwf	??_move
  3523  0518  0831               	movf	??_move,w
  3524  0519  00FC               	movwf	isFood@p
  3525  051A  0837               	movf	move@s,w
  3526  051B  120A  158A  279B  120A  118A  	fcall	_isFood
  3527  0520  087C               	movf	?_isFood,w
  3528  0521  047D               	iorwf	?_isFood+1,w
  3529  0522  1D03               	btfss	3,2
  3530  0523  2D59               	goto	l1706
  3531                           
  3532                           ;snake.c: 83: pop(&(s->q));
  3533  0524  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0525  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0526  0837               	movf	move@s,w
  3536  0527  3E20               	addlw	32
  3537  0528  120A  158A  27CC  120A  118A  	fcall	_pop
  3538                           
  3539                           ;snake.c: 84: s->field[getI(lastPosition)][getJ(lastPosition)] = 0;
  3540  052D  1283               	bcf	3,5	;RP0=0, select bank0
  3541  052E  1303               	bcf	3,6	;RP1=0, select bank0
  3542  052F  0835               	movf	move@lastPosition,w
  3543  0530  120A  158A  25F6  120A  118A  	fcall	_getI
  3544  0535  1283               	bcf	3,5	;RP0=0, select bank0
  3545  0536  1303               	bcf	3,6	;RP1=0, select bank0
  3546  0537  00B1               	movwf	??_move
  3547  0538  3003               	movlw	3
  3548  0539                     u1445:	
  3549  0539  1003               	clrc
  3550  053A  0DB1               	rlf	??_move,f
  3551  053B  3EFF               	addlw	-1
  3552  053C  1D03               	skipz
  3553  053D  2D39               	goto	u1445
  3554  053E  1003               	clrc
  3555  053F  0D31               	rlf	??_move,w
  3556  0540  0737               	addwf	move@s,w
  3557  0541  00B2               	movwf	??_move+1
  3558  0542  0835               	movf	move@lastPosition,w
  3559  0543  120A  158A  2577  120A  118A  	fcall	_getJ
  3560  0548  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0549  1303               	bcf	3,6	;RP1=0, select bank0
  3562  054A  0732               	addwf	??_move+1,w
  3563  054B  00B3               	movwf	??_move+2
  3564  054C  0833               	movf	??_move+2,w
  3565  054D  0084               	movwf	4
  3566  054E  1783               	bsf	3,7	;select IRP bank2
  3567  054F  0180               	clrf	0
  3568                           
  3569                           ;snake.c: 85: set(s, newPosition);
  3570  0550  0836               	movf	move@newPosition,w
  3571  0551  00B1               	movwf	??_move
  3572  0552  0831               	movf	??_move,w
  3573  0553  00FD               	movwf	set@p
  3574  0554  0837               	movf	move@s,w
  3575  0555  120A  158A  273C   	fcall	_set
  3576                           
  3577                           ;snake.c: 86: }
  3578  0558  0008               	return
  3579  0559                     l1706:	
  3580                           
  3581                           ;snake.c: 87: else{
  3582                           ;snake.c: 88: set(s, newPosition);
  3583  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3584  055A  1303               	bcf	3,6	;RP1=0, select bank0
  3585  055B  0836               	movf	move@newPosition,w
  3586  055C  00B1               	movwf	??_move
  3587  055D  0831               	movf	??_move,w
  3588  055E  00FD               	movwf	set@p
  3589  055F  0837               	movf	move@s,w
  3590  0560  120A  158A  273C  120A  118A  	fcall	_set
  3591                           
  3592                           ;snake.c: 89: if (!won(s))
  3593  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3594  0566  1303               	bcf	3,6	;RP1=0, select bank0
  3595  0567  0837               	movf	move@s,w
  3596  0568  120A  158A  2710  120A  118A  	fcall	_won
  3597  056D  0870               	movf	?_won,w
  3598  056E  0471               	iorwf	?_won+1,w
  3599  056F  1D03               	btfss	3,2
  3600  0570  0008               	return
  3601                           
  3602                           ;snake.c: 90: makeFood(s);
  3603  0571  1283               	bcf	3,5	;RP0=0, select bank0
  3604  0572  1303               	bcf	3,6	;RP1=0, select bank0
  3605  0573  0837               	movf	move@s,w
  3606  0574  120A  118A  22E6   	fcall	_makeFood
  3607  0577  0008               	return
  3608  0578                     __end_of_move:	
  3609                           
  3610                           	psect	text16
  3611  0F3C                     __ptext16:	
  3612 ;; *************** function _set *****************
  3613 ;; Defined at:
  3614 ;;		line 3 in file "snake.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  s               1    wreg     PTR struct .
  3617 ;;		 -> main@s(74), 
  3618 ;;  p               1   13[COMMON] unsigned char 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  s               1    3[BANK0 ] PTR struct .
  3621 ;;		 -> main@s(74), 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3631 ;;      Params:         1       0       0       0       0
  3632 ;;      Locals:         0       1       0       0       0
  3633 ;;      Temps:          0       3       0       0       0
  3634 ;;      Totals:         1       4       0       0       0
  3635 ;;Total ram usage:        5 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    2
  3638 ;; This function calls:
  3639 ;;		_getI
  3640 ;;		_getJ
  3641 ;;		_push
  3642 ;; This function is called by:
  3643 ;;		_startSnake
  3644 ;;		_move
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           
  3649                           ;psect for function _set
  3650  0F3C                     _set:	
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3654                           ;set@s stored from wreg
  3655  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  3657  0F3E  00A3               	movwf	set@s
  3658                           
  3659                           ;snake.c: 4: s->field[getI(p)][getJ(p)] = 1;
  3660  0F3F  087D               	movf	set@p,w
  3661  0F40  120A  158A  25F6  120A  158A  	fcall	_getI
  3662  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0F47  00A0               	movwf	??_set
  3665  0F48  3003               	movlw	3
  3666  0F49                     u1215:	
  3667  0F49  1003               	clrc
  3668  0F4A  0DA0               	rlf	??_set,f
  3669  0F4B  3EFF               	addlw	-1
  3670  0F4C  1D03               	skipz
  3671  0F4D  2F49               	goto	u1215
  3672  0F4E  1003               	clrc
  3673  0F4F  0D20               	rlf	??_set,w
  3674  0F50  0723               	addwf	set@s,w
  3675  0F51  00A1               	movwf	??_set+1
  3676  0F52  087D               	movf	set@p,w
  3677  0F53  120A  158A  2577  120A  158A  	fcall	_getJ
  3678  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0F5A  0721               	addwf	??_set+1,w
  3681  0F5B  00A2               	movwf	??_set+2
  3682  0F5C  0822               	movf	??_set+2,w
  3683  0F5D  0084               	movwf	4
  3684  0F5E  1783               	bsf	3,7	;select IRP bank2
  3685  0F5F  0180               	clrf	0
  3686  0F60  0A80               	incf	0,f
  3687                           
  3688                           ;snake.c: 5: push(&s->q, p);
  3689  0F61  087D               	movf	set@p,w
  3690  0F62  00A0               	movwf	??_set
  3691  0F63  0820               	movf	??_set,w
  3692  0F64  00F7               	movwf	push@x
  3693  0F65  0823               	movf	set@s,w
  3694  0F66  3E20               	addlw	32
  3695  0F67  120A  118A  2295   	fcall	_push
  3696  0F6A  0008               	return
  3697  0F6B                     __end_of_set:	
  3698                           
  3699                           	psect	text17
  3700  0295                     __ptext17:	
  3701 ;; *************** function _push *****************
  3702 ;; Defined at:
  3703 ;;		line 8 in file "queue.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  q               1    wreg     PTR struct .
  3706 ;;		 -> main@s(74), 
  3707 ;;  x               1    7[COMMON] unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  q               1   12[COMMON] PTR struct .
  3710 ;;		 -> main@s(74), 
  3711 ;;  pos             2   10[COMMON] int 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3721 ;;      Params:         1       0       0       0       0
  3722 ;;      Locals:         3       0       0       0       0
  3723 ;;      Temps:          2       0       0       0       0
  3724 ;;      Totals:         6       0       0       0       0
  3725 ;;Total ram usage:        6 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    1
  3728 ;; This function calls:
  3729 ;;		___awmod
  3730 ;; This function is called by:
  3731 ;;		_set
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _push
  3737  0295                     _push:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _push: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3741                           ;push@q stored from wreg
  3742  0295  00FC               	movwf	push@q
  3743                           
  3744                           ;queue.c: 9: int pos = q->head % q->capacity;
  3745  0296  087C               	movf	push@q,w
  3746  0297  0084               	movwf	4
  3747  0298  1783               	bsf	3,7	;select IRP bank2
  3748  0299  0800               	movf	0,w
  3749  029A  00F0               	movwf	___awmod@divisor
  3750  029B  0A84               	incf	4,f
  3751  029C  0800               	movf	0,w
  3752  029D  00F1               	movwf	___awmod@divisor+1
  3753  029E  087C               	movf	push@q,w
  3754  029F  3E04               	addlw	4
  3755  02A0  0084               	movwf	4
  3756  02A1  0800               	movf	0,w
  3757  02A2  00F2               	movwf	___awmod@dividend
  3758  02A3  0A84               	incf	4,f
  3759  02A4  0800               	movf	0,w
  3760  02A5  00F3               	movwf	___awmod@dividend+1
  3761  02A6  120A  118A  21AA  120A  118A  	fcall	___awmod
  3762  02AB  0871               	movf	?___awmod+1,w
  3763  02AC  00FB               	movwf	push@pos+1
  3764  02AD  0870               	movf	?___awmod,w
  3765  02AE  00FA               	movwf	push@pos
  3766                           
  3767                           ;queue.c: 10: q->head = (q->head + 1) % q->capacity;
  3768  02AF  087C               	movf	push@q,w
  3769  02B0  0084               	movwf	4
  3770  02B1  1783               	bsf	3,7	;select IRP bank2
  3771  02B2  0800               	movf	0,w
  3772  02B3  00F0               	movwf	___awmod@divisor
  3773  02B4  0A84               	incf	4,f
  3774  02B5  0800               	movf	0,w
  3775  02B6  00F1               	movwf	___awmod@divisor+1
  3776  02B7  087C               	movf	push@q,w
  3777  02B8  3E04               	addlw	4
  3778  02B9  0084               	movwf	4
  3779  02BA  0800               	movf	0,w
  3780  02BB  00F8               	movwf	??_push
  3781  02BC  0A84               	incf	4,f
  3782  02BD  0800               	movf	0,w
  3783  02BE  00F9               	movwf	??_push+1
  3784  02BF  0878               	movf	??_push,w
  3785  02C0  3E01               	addlw	1
  3786  02C1  00F2               	movwf	___awmod@dividend
  3787  02C2  0879               	movf	??_push+1,w
  3788  02C3  1803               	skipnc
  3789  02C4  3E01               	addlw	1
  3790  02C5  3E00               	addlw	0
  3791  02C6  00F3               	movwf	___awmod@dividend+1
  3792  02C7  120A  118A  21AA   	fcall	___awmod
  3793  02CA  087C               	movf	push@q,w
  3794  02CB  3E04               	addlw	4
  3795  02CC  0084               	movwf	4
  3796  02CD  0870               	movf	?___awmod,w
  3797  02CE  1783               	bsf	3,7	;select IRP bank2
  3798  02CF  0080               	movwf	0
  3799  02D0  0A84               	incf	4,f
  3800  02D1  0871               	movf	?___awmod+1,w
  3801  02D2  0080               	movwf	0
  3802                           
  3803                           ;queue.c: 11: q->v[pos] = x;
  3804  02D3  0877               	movf	push@x,w
  3805  02D4  00F8               	movwf	??_push
  3806  02D5  087A               	movf	push@pos,w
  3807  02D6  3E08               	addlw	8
  3808  02D7  077C               	addwf	push@q,w
  3809  02D8  00F9               	movwf	??_push+1
  3810  02D9  0879               	movf	??_push+1,w
  3811  02DA  0084               	movwf	4
  3812  02DB  0878               	movf	??_push,w
  3813  02DC  0080               	movwf	0
  3814                           
  3815                           ;queue.c: 12: q->size++;
  3816  02DD  087C               	movf	push@q,w
  3817  02DE  3E02               	addlw	2
  3818  02DF  0084               	movwf	4
  3819  02E0  3001               	movlw	1
  3820  02E1  0780               	addwf	0,f
  3821  02E2  0A84               	incf	4,f
  3822  02E3  1803               	skipnc
  3823  02E4  0A80               	incf	0,f
  3824  02E5  0008               	return
  3825  02E6                     __end_of_push:	
  3826                           
  3827                           	psect	text18
  3828  0FCC                     __ptext18:	
  3829 ;; *************** function _pop *****************
  3830 ;; Defined at:
  3831 ;;		line 25 in file "queue.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  q               1    wreg     PTR struct .
  3834 ;;		 -> main@s(74), 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  q               1    9[COMMON] PTR struct .
  3837 ;;		 -> main@s(74), 
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3847 ;;      Params:         0       0       0       0       0
  3848 ;;      Locals:         1       0       0       0       0
  3849 ;;      Temps:          2       0       0       0       0
  3850 ;;      Totals:         3       0       0       0       0
  3851 ;;Total ram usage:        3 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    1
  3854 ;; This function calls:
  3855 ;;		___awmod
  3856 ;; This function is called by:
  3857 ;;		_move
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           
  3862                           ;psect for function _pop
  3863  0FCC                     _pop:	
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _pop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3867                           ;pop@q stored from wreg
  3868  0FCC  00F9               	movwf	pop@q
  3869                           
  3870                           ;queue.c: 26: q->tail = (q->tail + 1) % q->capacity;
  3871  0FCD  0879               	movf	pop@q,w
  3872  0FCE  0084               	movwf	4
  3873  0FCF  1783               	bsf	3,7	;select IRP bank2
  3874  0FD0  0800               	movf	0,w
  3875  0FD1  00F0               	movwf	___awmod@divisor
  3876  0FD2  0A84               	incf	4,f
  3877  0FD3  0800               	movf	0,w
  3878  0FD4  00F1               	movwf	___awmod@divisor+1
  3879  0FD5  0879               	movf	pop@q,w
  3880  0FD6  3E06               	addlw	6
  3881  0FD7  0084               	movwf	4
  3882  0FD8  0800               	movf	0,w
  3883  0FD9  00F7               	movwf	??_pop
  3884  0FDA  0A84               	incf	4,f
  3885  0FDB  0800               	movf	0,w
  3886  0FDC  00F8               	movwf	??_pop+1
  3887  0FDD  0877               	movf	??_pop,w
  3888  0FDE  3E01               	addlw	1
  3889  0FDF  00F2               	movwf	___awmod@dividend
  3890  0FE0  0878               	movf	??_pop+1,w
  3891  0FE1  1803               	skipnc
  3892  0FE2  3E01               	addlw	1
  3893  0FE3  3E00               	addlw	0
  3894  0FE4  00F3               	movwf	___awmod@dividend+1
  3895  0FE5  120A  118A  21AA   	fcall	___awmod
  3896  0FE8  0879               	movf	pop@q,w
  3897  0FE9  3E06               	addlw	6
  3898  0FEA  0084               	movwf	4
  3899  0FEB  0870               	movf	?___awmod,w
  3900  0FEC  1783               	bsf	3,7	;select IRP bank2
  3901  0FED  0080               	movwf	0
  3902  0FEE  0A84               	incf	4,f
  3903  0FEF  0871               	movf	?___awmod+1,w
  3904  0FF0  0080               	movwf	0
  3905                           
  3906                           ;queue.c: 27: q->size--;
  3907  0FF1  0879               	movf	pop@q,w
  3908  0FF2  3E02               	addlw	2
  3909  0FF3  0084               	movwf	4
  3910  0FF4  30FF               	movlw	255
  3911  0FF5  0780               	addwf	0,f
  3912  0FF6  0F84               	incfsz	4,f
  3913  0FF7  0800               	movf	0,w
  3914  0FF8  1803               	skipnc
  3915  0FF9  0A00               	incf	0,w
  3916  0FFA  00FF               	movwf	127
  3917  0FFB  30FF               	movlw	255
  3918  0FFC  077F               	addwf	127,w
  3919  0FFD  0080               	movwf	0
  3920  0FFE  0384               	decf	4,f
  3921  0FFF  0008               	return
  3922  1000                     __end_of_pop:	
  3923                           
  3924                           	psect	text19
  3925  02E6                     __ptext19:	
  3926 ;; *************** function _makeFood *****************
  3927 ;; Defined at:
  3928 ;;		line 95 in file "snake.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  s               1    wreg     PTR struct .
  3931 ;;		 -> main@s(74), 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  s               1   15[BANK0 ] PTR struct .
  3934 ;;		 -> main@s(74), 
  3935 ;;  j               2   13[BANK0 ] int 
  3936 ;;  i               2   11[BANK0 ] int 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      void 
  3939 ;; Registers used:
  3940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3946 ;;      Params:         0       0       0       0       0
  3947 ;;      Locals:         0       5       0       0       0
  3948 ;;      Temps:          0       4       0       0       0
  3949 ;;      Totals:         0       9       0       0       0
  3950 ;;Total ram usage:        9 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    3
  3953 ;; This function calls:
  3954 ;;		_isSet
  3955 ;;		_newPair
  3956 ;;		_rand
  3957 ;; This function is called by:
  3958 ;;		_startSnake
  3959 ;;		_move
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           
  3964                           ;psect for function _makeFood
  3965  02E6                     _makeFood:	
  3966                           
  3967                           ;incstack = 0
  3968                           ; Regs used in _makeFood: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3969                           ;makeFood@s stored from wreg
  3970  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  3971  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  3972  02E8  00AF               	movwf	makeFood@s
  3973  02E9                     l199:	
  3974                           ;snake.c: 96: int i, j;
  3975                           ;snake.c: 97: do{
  3976                           
  3977                           
  3978                           ;snake.c: 98: i = rand() % 2;
  3979  02E9  120A  118A  2163  120A  118A  	fcall	_rand
  3980  02EE  3001               	movlw	1
  3981  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  3982  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  3983  02F1  0520               	andwf	?_rand,w
  3984  02F2  00AB               	movwf	makeFood@i
  3985  02F3  3000               	movlw	0
  3986  02F4  0521               	andwf	?_rand+1,w
  3987  02F5  00AC               	movwf	makeFood@i+1
  3988                           
  3989                           ;snake.c: 99: j = rand() % 16;
  3990  02F6  120A  118A  2163  120A  118A  	fcall	_rand
  3991  02FB  300F               	movlw	15
  3992  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  3993  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  3994  02FE  0520               	andwf	?_rand,w
  3995  02FF  00AD               	movwf	makeFood@j
  3996  0300  3000               	movlw	0
  3997  0301  0521               	andwf	?_rand+1,w
  3998  0302  00AE               	movwf	makeFood@j+1
  3999                           
  4000                           ;snake.c: 100: }while(isSet(s, newPair(i, j)));
  4001  0303  082D               	movf	makeFood@j,w
  4002  0304  00A7               	movwf	??_makeFood
  4003  0305  0827               	movf	??_makeFood,w
  4004  0306  00F0               	movwf	newPair@j
  4005  0307  082B               	movf	makeFood@i,w
  4006  0308  120A  158A  25AF  120A  118A  	fcall	_newPair
  4007  030D  1283               	bcf	3,5	;RP0=0, select bank0
  4008  030E  1303               	bcf	3,6	;RP1=0, select bank0
  4009  030F  00A8               	movwf	??_makeFood+1
  4010  0310  0828               	movf	??_makeFood+1,w
  4011  0311  00FC               	movwf	isSet@p
  4012  0312  082F               	movf	makeFood@s,w
  4013  0313  120A  158A  276B  120A  118A  	fcall	_isSet
  4014  0318  087C               	movf	?_isSet,w
  4015  0319  047D               	iorwf	?_isSet+1,w
  4016  031A  1903               	btfsc	3,2
  4017  031B  2B1F               	goto	l1592
  4018  031C  1283               	bcf	3,5	;RP0=0, select bank0
  4019  031D  1303               	bcf	3,6	;RP1=0, select bank0
  4020  031E  2AE9               	goto	l199
  4021  031F                     l1592:	
  4022                           
  4023                           ;snake.c: 101: s->field[i][j] = 2;
  4024  031F  3002               	movlw	2
  4025  0320  1283               	bcf	3,5	;RP0=0, select bank0
  4026  0321  1303               	bcf	3,6	;RP1=0, select bank0
  4027  0322  00A7               	movwf	??_makeFood
  4028  0323  082B               	movf	makeFood@i,w
  4029  0324  00A8               	movwf	??_makeFood+1
  4030  0325  3003               	movlw	3
  4031  0326                     u1285:	
  4032  0326  1003               	clrc
  4033  0327  0DA8               	rlf	??_makeFood+1,f
  4034  0328  3EFF               	addlw	-1
  4035  0329  1D03               	skipz
  4036  032A  2B26               	goto	u1285
  4037  032B  1003               	clrc
  4038  032C  0D28               	rlf	??_makeFood+1,w
  4039  032D  072F               	addwf	makeFood@s,w
  4040  032E  00A9               	movwf	??_makeFood+2
  4041  032F  082D               	movf	makeFood@j,w
  4042  0330  0729               	addwf	??_makeFood+2,w
  4043  0331  00AA               	movwf	??_makeFood+3
  4044  0332  082A               	movf	??_makeFood+3,w
  4045  0333  0084               	movwf	4
  4046  0334  0827               	movf	??_makeFood,w
  4047  0335  1783               	bsf	3,7	;select IRP bank2
  4048  0336  0080               	movwf	0
  4049  0337  0008               	return
  4050  0338                     __end_of_makeFood:	
  4051                           
  4052                           	psect	text20
  4053  0163                     __ptext20:	
  4054 ;; *************** function _rand *****************
  4055 ;; Defined at:
  4056 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  2    0[BANK0 ] int 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4070 ;;      Params:         0       2       0       0       0
  4071 ;;      Locals:         0       0       0       0       0
  4072 ;;      Temps:          0       5       0       0       0
  4073 ;;      Totals:         0       7       0       0       0
  4074 ;;Total ram usage:        7 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    1
  4077 ;; This function calls:
  4078 ;;		___lmul
  4079 ;; This function is called by:
  4080 ;;		_makeFood
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _rand
  4086  0163                     _rand:	
  4087                           
  4088                           ;incstack = 0
  4089                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4090  0163  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0164  1303               	bcf	3,6	;RP1=0, select bank0
  4092  0165  086C               	movf	_randx+3,w
  4093  0166  00F3               	movwf	___lmul@multiplier+3
  4094  0167  086B               	movf	_randx+2,w
  4095  0168  00F2               	movwf	___lmul@multiplier+2
  4096  0169  086A               	movf	_randx+1,w
  4097  016A  00F1               	movwf	___lmul@multiplier+1
  4098  016B  0869               	movf	_randx,w
  4099  016C  00F0               	movwf	___lmul@multiplier
  4100  016D  3041               	movlw	65
  4101  016E  00F7               	movwf	___lmul@multiplicand+3
  4102  016F  30C6               	movlw	198
  4103  0170  00F6               	movwf	___lmul@multiplicand+2
  4104  0171  304E               	movlw	78
  4105  0172  00F5               	movwf	___lmul@multiplicand+1
  4106  0173  306D               	movlw	109
  4107  0174  00F4               	movwf	___lmul@multiplicand
  4108  0175  120A  118A  20A1  120A  118A  	fcall	___lmul
  4109  017A  0873               	movf	?___lmul+3,w
  4110  017B  1283               	bcf	3,5	;RP0=0, select bank0
  4111  017C  1303               	bcf	3,6	;RP1=0, select bank0
  4112  017D  00EC               	movwf	_randx+3
  4113  017E  0872               	movf	?___lmul+2,w
  4114  017F  00EB               	movwf	_randx+2
  4115  0180  0871               	movf	?___lmul+1,w
  4116  0181  00EA               	movwf	_randx+1
  4117  0182  0870               	movf	?___lmul,w
  4118  0183  00E9               	movwf	_randx
  4119  0184  3039               	movlw	57
  4120  0185  07E9               	addwf	_randx,f
  4121  0186  3030               	movlw	48
  4122  0187  1803               	skipnc
  4123  0188  3031               	movlw	49
  4124  0189  07EA               	addwf	_randx+1,f
  4125  018A  3000               	movlw	0
  4126  018B  1803               	skipnc
  4127  018C  3001               	movlw	1
  4128  018D  07EB               	addwf	_randx+2,f
  4129  018E  3000               	movlw	0
  4130  018F  1803               	skipnc
  4131  0190  3001               	movlw	1
  4132  0191  07EC               	addwf	_randx+3,f
  4133  0192  0869               	movf	_randx,w
  4134  0193  00A2               	movwf	??_rand
  4135  0194  086A               	movf	_randx+1,w
  4136  0195  00A3               	movwf	??_rand+1
  4137  0196  086B               	movf	_randx+2,w
  4138  0197  00A4               	movwf	??_rand+2
  4139  0198  086C               	movf	_randx+3,w
  4140  0199  00A5               	movwf	??_rand+3
  4141  019A  3010               	movlw	16
  4142  019B  00A6               	movwf	??_rand+4
  4143  019C                     u1185:	
  4144  019C  0D25               	rlf	??_rand+3,w
  4145  019D  0CA5               	rrf	??_rand+3,f
  4146  019E  0CA4               	rrf	??_rand+2,f
  4147  019F  0CA3               	rrf	??_rand+1,f
  4148  01A0  0CA2               	rrf	??_rand,f
  4149  01A1  0BA6               	decfsz	??_rand+4,f
  4150  01A2  299C               	goto	u1185
  4151  01A3  30FF               	movlw	255
  4152  01A4  0522               	andwf	??_rand,w
  4153  01A5  00A0               	movwf	?_rand
  4154  01A6  307F               	movlw	127
  4155  01A7  0523               	andwf	??_rand+1,w
  4156  01A8  00A1               	movwf	?_rand+1
  4157  01A9  0008               	return
  4158  01AA                     __end_of_rand:	
  4159                           
  4160                           	psect	text21
  4161  00A1                     __ptext21:	
  4162 ;; *************** function ___lmul *****************
  4163 ;; Defined at:
  4164 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  multiplier      4    0[COMMON] unsigned long 
  4167 ;;  multiplicand    4    4[COMMON] unsigned long 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  product         4    9[COMMON] unsigned long 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  4    0[COMMON] unsigned long 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4179 ;;      Params:         8       0       0       0       0
  4180 ;;      Locals:         4       0       0       0       0
  4181 ;;      Temps:          1       0       0       0       0
  4182 ;;      Totals:        13       0       0       0       0
  4183 ;;Total ram usage:       13 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_rand
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function ___lmul
  4194  00A1                     ___lmul:	
  4195                           
  4196                           ;incstack = 0
  4197                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4198  00A1  3000               	movlw	0
  4199  00A2  00FC               	movwf	___lmul@product+3
  4200  00A3  3000               	movlw	0
  4201  00A4  00FB               	movwf	___lmul@product+2
  4202  00A5  3000               	movlw	0
  4203  00A6  00FA               	movwf	___lmul@product+1
  4204  00A7  3000               	movlw	0
  4205  00A8  00F9               	movwf	___lmul@product
  4206  00A9                     l1372:	
  4207  00A9  1C70               	btfss	___lmul@multiplier,0
  4208  00AA  28BF               	goto	l1376
  4209  00AB  0874               	movf	___lmul@multiplicand,w
  4210  00AC  07F9               	addwf	___lmul@product,f
  4211  00AD  0875               	movf	___lmul@multiplicand+1,w
  4212  00AE  1103               	clrz
  4213  00AF  1803               	skipnc
  4214  00B0  3E01               	addlw	1
  4215  00B1  1D03               	btfss	3,2
  4216  00B2  07FA               	addwf	___lmul@product+1,f
  4217  00B3  0876               	movf	___lmul@multiplicand+2,w
  4218  00B4  1103               	clrz
  4219  00B5  1803               	skipnc
  4220  00B6  3E01               	addlw	1
  4221  00B7  1D03               	btfss	3,2
  4222  00B8  07FB               	addwf	___lmul@product+2,f
  4223  00B9  0877               	movf	___lmul@multiplicand+3,w
  4224  00BA  1103               	clrz
  4225  00BB  1803               	skipnc
  4226  00BC  3E01               	addlw	1
  4227  00BD  1D03               	btfss	3,2
  4228  00BE  07FC               	addwf	___lmul@product+3,f
  4229  00BF                     l1376:	
  4230  00BF  3001               	movlw	1
  4231  00C0  00F8               	movwf	??___lmul
  4232  00C1                     u995:	
  4233  00C1  1003               	clrc
  4234  00C2  0DF4               	rlf	___lmul@multiplicand,f
  4235  00C3  0DF5               	rlf	___lmul@multiplicand+1,f
  4236  00C4  0DF6               	rlf	___lmul@multiplicand+2,f
  4237  00C5  0DF7               	rlf	___lmul@multiplicand+3,f
  4238  00C6  0BF8               	decfsz	??___lmul,f
  4239  00C7  28C1               	goto	u995
  4240  00C8  3001               	movlw	1
  4241  00C9                     u1005:	
  4242  00C9  1003               	clrc
  4243  00CA  0CF3               	rrf	___lmul@multiplier+3,f
  4244  00CB  0CF2               	rrf	___lmul@multiplier+2,f
  4245  00CC  0CF1               	rrf	___lmul@multiplier+1,f
  4246  00CD  0CF0               	rrf	___lmul@multiplier,f
  4247  00CE  3EFF               	addlw	-1
  4248  00CF  1D03               	skipz
  4249  00D0  28C9               	goto	u1005
  4250  00D1  0873               	movf	___lmul@multiplier+3,w
  4251  00D2  0472               	iorwf	___lmul@multiplier+2,w
  4252  00D3  0471               	iorwf	___lmul@multiplier+1,w
  4253  00D4  0470               	iorwf	___lmul@multiplier,w
  4254  00D5  1D03               	skipz
  4255  00D6  28A9               	goto	l1372
  4256  00D7  087C               	movf	___lmul@product+3,w
  4257  00D8  00F3               	movwf	?___lmul+3
  4258  00D9  087B               	movf	___lmul@product+2,w
  4259  00DA  00F2               	movwf	?___lmul+2
  4260  00DB  087A               	movf	___lmul@product+1,w
  4261  00DC  00F1               	movwf	?___lmul+1
  4262  00DD  0879               	movf	___lmul@product,w
  4263  00DE  00F0               	movwf	?___lmul
  4264  00DF  0008               	return
  4265  00E0                     __end_of___lmul:	
  4266                           
  4267                           	psect	text22
  4268  0F6B                     __ptext22:	
  4269 ;; *************** function _isSet *****************
  4270 ;; Defined at:
  4271 ;;		line 8 in file "snake.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  s               1    wreg     PTR struct .
  4274 ;;		 -> main@s(74), 
  4275 ;;  p               1   12[COMMON] unsigned char 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  s               1    5[BANK0 ] PTR struct .
  4278 ;;		 -> main@s(74), 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2   12[COMMON] int 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4288 ;;      Params:         2       0       0       0       0
  4289 ;;      Locals:         0       1       0       0       0
  4290 ;;      Temps:          0       5       0       0       0
  4291 ;;      Totals:         2       6       0       0       0
  4292 ;;Total ram usage:        8 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    2
  4295 ;; This function calls:
  4296 ;;		_getI
  4297 ;;		_getJ
  4298 ;; This function is called by:
  4299 ;;		_move
  4300 ;;		_makeFood
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _isSet
  4306  0F6B                     _isSet:	
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _isSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4310                           ;isSet@s stored from wreg
  4311  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  4313  0F6D  00A5               	movwf	isSet@s
  4314                           
  4315                           ;snake.c: 9: return s->field[getI(p)][getJ(p)] == 1;
  4316  0F6E  087C               	movf	isSet@p,w
  4317  0F6F  120A  158A  25F6  120A  158A  	fcall	_getI
  4318  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  4319  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  4320  0F76  00A0               	movwf	??_isSet
  4321  0F77  3003               	movlw	3
  4322  0F78                     u1155:	
  4323  0F78  1003               	clrc
  4324  0F79  0DA0               	rlf	??_isSet,f
  4325  0F7A  3EFF               	addlw	-1
  4326  0F7B  1D03               	skipz
  4327  0F7C  2F78               	goto	u1155
  4328  0F7D  1003               	clrc
  4329  0F7E  0D20               	rlf	??_isSet,w
  4330  0F7F  0725               	addwf	isSet@s,w
  4331  0F80  00A1               	movwf	??_isSet+1
  4332  0F81  087C               	movf	isSet@p,w
  4333  0F82  120A  158A  2577  120A  158A  	fcall	_getJ
  4334  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  4335  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  4336  0F89  0721               	addwf	??_isSet+1,w
  4337  0F8A  00A2               	movwf	??_isSet+2
  4338  0F8B  0822               	movf	??_isSet+2,w
  4339  0F8C  0084               	movwf	4
  4340  0F8D  1783               	bsf	3,7	;select IRP bank2
  4341  0F8E  0300               	decf	0,w
  4342  0F8F  1D03               	btfss	3,2
  4343  0F90  2F93               	goto	u1160
  4344  0F91  3001               	movlw	1
  4345  0F92  2F94               	goto	u1170
  4346  0F93                     u1160:	
  4347  0F93  3000               	movlw	0
  4348  0F94                     u1170:	
  4349  0F94  00A3               	movwf	??_isSet+3
  4350  0F95  01A4               	clrf	??_isSet+4
  4351  0F96  0823               	movf	??_isSet+3,w
  4352  0F97  00FC               	movwf	?_isSet
  4353  0F98  0824               	movf	??_isSet+4,w
  4354  0F99  00FD               	movwf	?_isSet+1
  4355  0F9A  0008               	return
  4356  0F9B                     __end_of_isSet:	
  4357                           
  4358                           	psect	text23
  4359  0F9B                     __ptext23:	
  4360 ;; *************** function _isFood *****************
  4361 ;; Defined at:
  4362 ;;		line 12 in file "snake.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  s               1    wreg     PTR struct .
  4365 ;;		 -> main@s(74), 
  4366 ;;  p               1   12[COMMON] unsigned char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  s               1    5[BANK0 ] PTR struct .
  4369 ;;		 -> main@s(74), 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  2   12[COMMON] int 
  4372 ;; Registers used:
  4373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4379 ;;      Params:         2       0       0       0       0
  4380 ;;      Locals:         0       1       0       0       0
  4381 ;;      Temps:          0       5       0       0       0
  4382 ;;      Totals:         2       6       0       0       0
  4383 ;;Total ram usage:        8 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    2
  4386 ;; This function calls:
  4387 ;;		_getI
  4388 ;;		_getJ
  4389 ;; This function is called by:
  4390 ;;		_move
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _isFood
  4396  0F9B                     _isFood:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _isFood: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4400                           ;isFood@s stored from wreg
  4401  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0F9D  00A5               	movwf	isFood@s
  4404                           
  4405                           ;snake.c: 13: return s->field[getI(p)][getJ(p)] == 2;
  4406  0F9E  087C               	movf	isFood@p,w
  4407  0F9F  120A  158A  25F6  120A  158A  	fcall	_getI
  4408  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0FA6  00A0               	movwf	??_isFood
  4411  0FA7  3003               	movlw	3
  4412  0FA8                     u1225:	
  4413  0FA8  1003               	clrc
  4414  0FA9  0DA0               	rlf	??_isFood,f
  4415  0FAA  3EFF               	addlw	-1
  4416  0FAB  1D03               	skipz
  4417  0FAC  2FA8               	goto	u1225
  4418  0FAD  1003               	clrc
  4419  0FAE  0D20               	rlf	??_isFood,w
  4420  0FAF  0725               	addwf	isFood@s,w
  4421  0FB0  00A1               	movwf	??_isFood+1
  4422  0FB1  087C               	movf	isFood@p,w
  4423  0FB2  120A  158A  2577  120A  158A  	fcall	_getJ
  4424  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  4426  0FB9  0721               	addwf	??_isFood+1,w
  4427  0FBA  00A2               	movwf	??_isFood+2
  4428  0FBB  0822               	movf	??_isFood+2,w
  4429  0FBC  0084               	movwf	4
  4430  0FBD  3002               	movlw	2
  4431  0FBE  1783               	bsf	3,7	;select IRP bank2
  4432  0FBF  0600               	xorwf	0,w
  4433  0FC0  1D03               	btfss	3,2
  4434  0FC1  2FC4               	goto	u1230
  4435  0FC2  3001               	movlw	1
  4436  0FC3  2FC5               	goto	u1240
  4437  0FC4                     u1230:	
  4438  0FC4  3000               	movlw	0
  4439  0FC5                     u1240:	
  4440  0FC5  00A3               	movwf	??_isFood+3
  4441  0FC6  01A4               	clrf	??_isFood+4
  4442  0FC7  0823               	movf	??_isFood+3,w
  4443  0FC8  00FC               	movwf	?_isFood
  4444  0FC9  0824               	movf	??_isFood+4,w
  4445  0FCA  00FD               	movwf	?_isFood+1
  4446  0FCB  0008               	return
  4447  0FCC                     __end_of_isFood:	
  4448                           
  4449                           	psect	text24
  4450  0EBE                     __ptext24:	
  4451 ;; *************** function _increment *****************
  4452 ;; Defined at:
  4453 ;;		line 15 in file "pair.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  p               1    wreg     unsigned char 
  4456 ;;  i               1   12[COMMON] unsigned char 
  4457 ;;  j               1   13[COMMON] unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  p               1    3[BANK0 ] unsigned char 
  4460 ;;  sumJ            1    2[BANK0 ] unsigned char 
  4461 ;;  sumI            1    1[BANK0 ] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      unsigned char 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, pclath, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4471 ;;      Params:         2       0       0       0       0
  4472 ;;      Locals:         0       3       0       0       0
  4473 ;;      Temps:          0       1       0       0       0
  4474 ;;      Totals:         2       4       0       0       0
  4475 ;;Total ram usage:        6 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		_getI
  4480 ;;		_getJ
  4481 ;;		_newPair
  4482 ;; This function is called by:
  4483 ;;		_move
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _increment
  4489  0EBE                     _increment:	
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _increment: [wreg+status,2+status,0+pclath+cstack]
  4493                           ;increment@p stored from wreg
  4494  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0EC0  00A3               	movwf	increment@p
  4497                           
  4498                           ;pair.c: 16: char sumI = (getI(p) + i + 2) % 2;
  4499  0EC1  0823               	movf	increment@p,w
  4500  0EC2  120A  158A  25F6  120A  158A  	fcall	_getI
  4501  0EC7  077C               	addwf	increment@i,w
  4502  0EC8  3E02               	addlw	2
  4503  0EC9  3901               	andlw	1
  4504  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  4505  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  4506  0ECC  00A0               	movwf	??_increment
  4507  0ECD  0820               	movf	??_increment,w
  4508  0ECE  00A1               	movwf	increment@sumI
  4509                           
  4510                           ;pair.c: 17: char sumJ = (getJ(p) + j + 16) % 16;
  4511  0ECF  0823               	movf	increment@p,w
  4512  0ED0  120A  158A  2577  120A  158A  	fcall	_getJ
  4513  0ED5  077D               	addwf	increment@j,w
  4514  0ED6  3E10               	addlw	16
  4515  0ED7  390F               	andlw	15
  4516  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  4517  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  4518  0EDA  00A0               	movwf	??_increment
  4519  0EDB  0820               	movf	??_increment,w
  4520  0EDC  00A2               	movwf	increment@sumJ
  4521                           
  4522                           ;pair.c: 18: return newPair(sumI, sumJ);
  4523  0EDD  0822               	movf	increment@sumJ,w
  4524  0EDE  00A0               	movwf	??_increment
  4525  0EDF  0820               	movf	??_increment,w
  4526  0EE0  00F0               	movwf	newPair@j
  4527  0EE1  0821               	movf	increment@sumI,w
  4528  0EE2  120A  158A  25AF   	fcall	_newPair
  4529  0EE5  0008               	return
  4530  0EE6                     __end_of_increment:	
  4531                           
  4532                           	psect	text25
  4533  0DAF                     __ptext25:	
  4534 ;; *************** function _newPair *****************
  4535 ;; Defined at:
  4536 ;;		line 3 in file "pair.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  i               1    wreg     unsigned char 
  4539 ;;  j               1    0[COMMON] unsigned char 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               1    2[COMMON] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      unsigned char 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4551 ;;      Params:         1       0       0       0       0
  4552 ;;      Locals:         1       0       0       0       0
  4553 ;;      Temps:          1       0       0       0       0
  4554 ;;      Totals:         3       0       0       0       0
  4555 ;;Total ram usage:        3 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_increment
  4561 ;;		_startSnake
  4562 ;;		_print
  4563 ;;		_makeFood
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _newPair
  4569  0DAF                     _newPair:	
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _newPair: [wreg+status,2+status,0]
  4573                           ;newPair@i stored from wreg
  4574  0DAF  00F2               	movwf	newPair@i
  4575                           
  4576                           ;pair.c: 4: return i*16 + j;
  4577  0DB0  0872               	movf	newPair@i,w
  4578  0DB1  00F1               	movwf	??_newPair
  4579  0DB2  3004               	movlw	4
  4580  0DB3                     u1145:	
  4581  0DB3  1003               	clrc
  4582  0DB4  0DF1               	rlf	??_newPair,f
  4583  0DB5  3EFF               	addlw	-1
  4584  0DB6  1D03               	skipz
  4585  0DB7  2DB3               	goto	u1145
  4586  0DB8  0870               	movf	newPair@j,w
  4587  0DB9  0771               	addwf	??_newPair,w
  4588  0DBA  0008               	return
  4589  0DBB                     __end_of_newPair:	
  4590                           
  4591                           	psect	text26
  4592  0D77                     __ptext26:	
  4593 ;; *************** function _getJ *****************
  4594 ;; Defined at:
  4595 ;;		line 11 in file "pair.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  p               1    wreg     unsigned char 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  p               1    0[COMMON] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      unsigned char 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4609 ;;      Params:         0       0       0       0       0
  4610 ;;      Locals:         1       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0
  4612 ;;      Totals:         1       0       0       0       0
  4613 ;;Total ram usage:        1 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_increment
  4619 ;;		_set
  4620 ;;		_isSet
  4621 ;;		_isFood
  4622 ;;		_move
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _getJ
  4628  0D77                     _getJ:	
  4629                           
  4630                           ;incstack = 0
  4631                           ; Regs used in _getJ: [wreg+status,2]
  4632                           ;getJ@p stored from wreg
  4633  0D77  00F0               	movwf	getJ@p
  4634                           
  4635                           ;pair.c: 12: return p%16;
  4636  0D78  0870               	movf	getJ@p,w
  4637  0D79  390F               	andlw	15
  4638  0D7A  0008               	return
  4639  0D7B                     __end_of_getJ:	
  4640                           
  4641                           	psect	text27
  4642  0DF6                     __ptext27:	
  4643 ;; *************** function _getI *****************
  4644 ;; Defined at:
  4645 ;;		line 7 in file "pair.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  p               1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  p               1   11[COMMON] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      unsigned char 
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0, pclath, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4659 ;;      Params:         0       0       0       0       0
  4660 ;;      Locals:         1       0       0       0       0
  4661 ;;      Temps:          2       0       0       0       0
  4662 ;;      Totals:         3       0       0       0       0
  4663 ;;Total ram usage:        3 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    1
  4666 ;; This function calls:
  4667 ;;		___awdiv
  4668 ;; This function is called by:
  4669 ;;		_increment
  4670 ;;		_set
  4671 ;;		_isSet
  4672 ;;		_isFood
  4673 ;;		_move
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _getI
  4679  0DF6                     _getI:	
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in _getI: [wreg+status,2+status,0+pclath+cstack]
  4683                           ;getI@p stored from wreg
  4684  0DF6  00FB               	movwf	getI@p
  4685                           
  4686                           ;pair.c: 8: return p/16;
  4687  0DF7  3010               	movlw	16
  4688  0DF8  00F0               	movwf	___awdiv@divisor
  4689  0DF9  3000               	movlw	0
  4690  0DFA  00F1               	movwf	___awdiv@divisor+1
  4691  0DFB  087B               	movf	getI@p,w
  4692  0DFC  00F9               	movwf	??_getI
  4693  0DFD  01FA               	clrf	??_getI+1
  4694  0DFE  0879               	movf	??_getI,w
  4695  0DFF  00F2               	movwf	___awdiv@dividend
  4696  0E00  087A               	movf	??_getI+1,w
  4697  0E01  00F3               	movwf	___awdiv@dividend+1
  4698  0E02  120A  118A  2338   	fcall	___awdiv
  4699  0E05  0870               	movf	?___awdiv,w
  4700  0E06  0008               	return
  4701  0E07                     __end_of_getI:	
  4702                           
  4703                           	psect	text28
  4704  0338                     __ptext28:	
  4705 ;; *************** function ___awdiv *****************
  4706 ;; Defined at:
  4707 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  divisor         2    0[COMMON] int 
  4710 ;;  dividend        2    2[COMMON] int 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  quotient        2    7[COMMON] int 
  4713 ;;  sign            1    6[COMMON] unsigned char 
  4714 ;;  counter         1    5[COMMON] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  2    0[COMMON] int 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4724 ;;      Params:         4       0       0       0       0
  4725 ;;      Locals:         4       0       0       0       0
  4726 ;;      Temps:          1       0       0       0       0
  4727 ;;      Totals:         9       0       0       0       0
  4728 ;;Total ram usage:        9 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_main
  4734 ;;		_getI
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function ___awdiv
  4740  0338                     ___awdiv:	
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4744  0338  01F6               	clrf	___awdiv@sign
  4745  0339  1FF1               	btfss	___awdiv@divisor+1,7
  4746  033A  2B42               	goto	l1244
  4747  033B  09F0               	comf	___awdiv@divisor,f
  4748  033C  09F1               	comf	___awdiv@divisor+1,f
  4749  033D  0AF0               	incf	___awdiv@divisor,f
  4750  033E  1903               	skipnz
  4751  033F  0AF1               	incf	___awdiv@divisor+1,f
  4752  0340  01F6               	clrf	___awdiv@sign
  4753  0341  0AF6               	incf	___awdiv@sign,f
  4754  0342                     l1244:	
  4755  0342  1FF3               	btfss	___awdiv@dividend+1,7
  4756  0343  2B4D               	goto	l1250
  4757  0344  09F2               	comf	___awdiv@dividend,f
  4758  0345  09F3               	comf	___awdiv@dividend+1,f
  4759  0346  0AF2               	incf	___awdiv@dividend,f
  4760  0347  1903               	skipnz
  4761  0348  0AF3               	incf	___awdiv@dividend+1,f
  4762  0349  3001               	movlw	1
  4763  034A  00F4               	movwf	??___awdiv
  4764  034B  0874               	movf	??___awdiv,w
  4765  034C  06F6               	xorwf	___awdiv@sign,f
  4766  034D                     l1250:	
  4767  034D  01F7               	clrf	___awdiv@quotient
  4768  034E  01F8               	clrf	___awdiv@quotient+1
  4769  034F  0870               	movf	___awdiv@divisor,w
  4770  0350  0471               	iorwf	___awdiv@divisor+1,w
  4771  0351  1903               	btfsc	3,2
  4772  0352  2B84               	goto	l1272
  4773  0353  01F5               	clrf	___awdiv@counter
  4774  0354  0AF5               	incf	___awdiv@counter,f
  4775  0355                     l1260:	
  4776  0355  1BF1               	btfsc	___awdiv@divisor+1,7
  4777  0356  2B63               	goto	l1262
  4778  0357  3001               	movlw	1
  4779  0358                     u825:	
  4780  0358  1003               	clrc
  4781  0359  0DF0               	rlf	___awdiv@divisor,f
  4782  035A  0DF1               	rlf	___awdiv@divisor+1,f
  4783  035B  3EFF               	addlw	-1
  4784  035C  1D03               	skipz
  4785  035D  2B58               	goto	u825
  4786  035E  3001               	movlw	1
  4787  035F  00F4               	movwf	??___awdiv
  4788  0360  0874               	movf	??___awdiv,w
  4789  0361  07F5               	addwf	___awdiv@counter,f
  4790  0362  2B55               	goto	l1260
  4791  0363                     l1262:	
  4792  0363  3001               	movlw	1
  4793  0364                     u845:	
  4794  0364  1003               	clrc
  4795  0365  0DF7               	rlf	___awdiv@quotient,f
  4796  0366  0DF8               	rlf	___awdiv@quotient+1,f
  4797  0367  3EFF               	addlw	-1
  4798  0368  1D03               	skipz
  4799  0369  2B64               	goto	u845
  4800  036A  0871               	movf	___awdiv@divisor+1,w
  4801  036B  0273               	subwf	___awdiv@dividend+1,w
  4802  036C  1D03               	skipz
  4803  036D  2B70               	goto	u855
  4804  036E  0870               	movf	___awdiv@divisor,w
  4805  036F  0272               	subwf	___awdiv@dividend,w
  4806  0370                     u855:	
  4807  0370  1C03               	skipc
  4808  0371  2B79               	goto	l1268
  4809  0372  0870               	movf	___awdiv@divisor,w
  4810  0373  02F2               	subwf	___awdiv@dividend,f
  4811  0374  0871               	movf	___awdiv@divisor+1,w
  4812  0375  1C03               	skipc
  4813  0376  03F3               	decf	___awdiv@dividend+1,f
  4814  0377  02F3               	subwf	___awdiv@dividend+1,f
  4815  0378  1477               	bsf	___awdiv@quotient,0
  4816  0379                     l1268:	
  4817  0379  3001               	movlw	1
  4818  037A                     u865:	
  4819  037A  1003               	clrc
  4820  037B  0CF1               	rrf	___awdiv@divisor+1,f
  4821  037C  0CF0               	rrf	___awdiv@divisor,f
  4822  037D  3EFF               	addlw	-1
  4823  037E  1D03               	skipz
  4824  037F  2B7A               	goto	u865
  4825  0380  3001               	movlw	1
  4826  0381  02F5               	subwf	___awdiv@counter,f
  4827  0382  1D03               	btfss	3,2
  4828  0383  2B63               	goto	l1262
  4829  0384                     l1272:	
  4830  0384  0876               	movf	___awdiv@sign,w
  4831  0385  1903               	btfsc	3,2
  4832  0386  2B8C               	goto	l1276
  4833  0387  09F7               	comf	___awdiv@quotient,f
  4834  0388  09F8               	comf	___awdiv@quotient+1,f
  4835  0389  0AF7               	incf	___awdiv@quotient,f
  4836  038A  1903               	skipnz
  4837  038B  0AF8               	incf	___awdiv@quotient+1,f
  4838  038C                     l1276:	
  4839  038C  0878               	movf	___awdiv@quotient+1,w
  4840  038D  00F1               	movwf	?___awdiv+1
  4841  038E  0877               	movf	___awdiv@quotient,w
  4842  038F  00F0               	movwf	?___awdiv
  4843  0390  0008               	return
  4844  0391                     __end_of___awdiv:	
  4845                           
  4846                           	psect	text29
  4847  0065                     __ptext29:	
  4848 ;; *************** function _front *****************
  4849 ;; Defined at:
  4850 ;;		line 15 in file "queue.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  q               1    wreg     PTR struct .
  4853 ;;		 -> main@s(74), 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  q               1    2[BANK0 ] PTR struct .
  4856 ;;		 -> main@s(74), 
  4857 ;;  pos             2    0[BANK0 ] int 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      unsigned char 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4867 ;;      Params:         0       0       0       0       0
  4868 ;;      Locals:         0       3       0       0       0
  4869 ;;      Temps:          6       0       0       0       0
  4870 ;;      Totals:         6       3       0       0       0
  4871 ;;Total ram usage:        9 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    1
  4874 ;; This function calls:
  4875 ;;		___awmod
  4876 ;; This function is called by:
  4877 ;;		_print
  4878 ;;		_move
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           
  4883                           ;psect for function _front
  4884  0065                     _front:	
  4885                           
  4886                           ;incstack = 0
  4887                           ; Regs used in _front: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4888                           ;front@q stored from wreg
  4889  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4890  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4891  0067  00A2               	movwf	front@q
  4892                           
  4893                           ;queue.c: 16: int pos = ((q->head-1) + q->capacity) % q->capacity;
  4894  0068  0822               	movf	front@q,w
  4895  0069  0084               	movwf	4
  4896  006A  1783               	bsf	3,7	;select IRP bank2
  4897  006B  0800               	movf	0,w
  4898  006C  00F0               	movwf	___awmod@divisor
  4899  006D  0A84               	incf	4,f
  4900  006E  0800               	movf	0,w
  4901  006F  00F1               	movwf	___awmod@divisor+1
  4902  0070  0822               	movf	front@q,w
  4903  0071  0084               	movwf	4
  4904  0072  0800               	movf	0,w
  4905  0073  00F7               	movwf	??_front
  4906  0074  0A84               	incf	4,f
  4907  0075  0800               	movf	0,w
  4908  0076  00F8               	movwf	??_front+1
  4909  0077  0822               	movf	front@q,w
  4910  0078  3E04               	addlw	4
  4911  0079  0084               	movwf	4
  4912  007A  0800               	movf	0,w
  4913  007B  00F9               	movwf	??_front+2
  4914  007C  0A84               	incf	4,f
  4915  007D  0800               	movf	0,w
  4916  007E  00FA               	movwf	??_front+3
  4917  007F  0877               	movf	??_front,w
  4918  0080  0779               	addwf	??_front+2,w
  4919  0081  00FB               	movwf	??_front+4
  4920  0082  0878               	movf	??_front+1,w
  4921  0083  1803               	skipnc
  4922  0084  0A78               	incf	??_front+1,w
  4923  0085  077A               	addwf	??_front+3,w
  4924  0086  00FC               	movwf	??_front+5
  4925  0087  087B               	movf	??_front+4,w
  4926  0088  3EFF               	addlw	255
  4927  0089  00F2               	movwf	___awmod@dividend
  4928  008A  087C               	movf	??_front+5,w
  4929  008B  1803               	skipnc
  4930  008C  3E01               	addlw	1
  4931  008D  3EFF               	addlw	255
  4932  008E  00F3               	movwf	___awmod@dividend+1
  4933  008F  120A  118A  21AA   	fcall	___awmod
  4934  0092  0871               	movf	?___awmod+1,w
  4935  0093  1283               	bcf	3,5	;RP0=0, select bank0
  4936  0094  1303               	bcf	3,6	;RP1=0, select bank0
  4937  0095  00A1               	movwf	front@pos+1
  4938  0096  0870               	movf	?___awmod,w
  4939  0097  00A0               	movwf	front@pos
  4940                           
  4941                           ;queue.c: 17: return q->v[pos];
  4942  0098  0820               	movf	front@pos,w
  4943  0099  3E08               	addlw	8
  4944  009A  0722               	addwf	front@q,w
  4945  009B  00F7               	movwf	??_front
  4946  009C  0877               	movf	??_front,w
  4947  009D  0084               	movwf	4
  4948  009E  1783               	bsf	3,7	;select IRP bank2
  4949  009F  0800               	movf	0,w
  4950  00A0  0008               	return
  4951  00A1                     __end_of_front:	
  4952                           
  4953                           	psect	text30
  4954  0E34                     __ptext30:	
  4955 ;; *************** function _back *****************
  4956 ;; Defined at:
  4957 ;;		line 20 in file "queue.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  q               1    wreg     PTR struct .
  4960 ;;		 -> main@s(74), 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  q               1   10[COMMON] PTR struct .
  4963 ;;		 -> main@s(74), 
  4964 ;;  pos             2    8[COMMON] int 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      unsigned char 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4974 ;;      Params:         0       0       0       0       0
  4975 ;;      Locals:         3       0       0       0       0
  4976 ;;      Temps:          1       0       0       0       0
  4977 ;;      Totals:         4       0       0       0       0
  4978 ;;Total ram usage:        4 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    1
  4981 ;; This function calls:
  4982 ;;		___awmod
  4983 ;; This function is called by:
  4984 ;;		_move
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _back
  4990  0E34                     _back:	
  4991                           
  4992                           ;incstack = 0
  4993                           ; Regs used in _back: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4994                           ;back@q stored from wreg
  4995  0E34  00FA               	movwf	back@q
  4996                           
  4997                           ;queue.c: 21: int pos = q->tail % q->capacity;
  4998  0E35  087A               	movf	back@q,w
  4999  0E36  0084               	movwf	4
  5000  0E37  1783               	bsf	3,7	;select IRP bank2
  5001  0E38  0800               	movf	0,w
  5002  0E39  00F0               	movwf	___awmod@divisor
  5003  0E3A  0A84               	incf	4,f
  5004  0E3B  0800               	movf	0,w
  5005  0E3C  00F1               	movwf	___awmod@divisor+1
  5006  0E3D  087A               	movf	back@q,w
  5007  0E3E  3E06               	addlw	6
  5008  0E3F  0084               	movwf	4
  5009  0E40  0800               	movf	0,w
  5010  0E41  00F2               	movwf	___awmod@dividend
  5011  0E42  0A84               	incf	4,f
  5012  0E43  0800               	movf	0,w
  5013  0E44  00F3               	movwf	___awmod@dividend+1
  5014  0E45  120A  118A  21AA   	fcall	___awmod
  5015  0E48  0871               	movf	?___awmod+1,w
  5016  0E49  00F9               	movwf	back@pos+1
  5017  0E4A  0870               	movf	?___awmod,w
  5018  0E4B  00F8               	movwf	back@pos
  5019                           
  5020                           ;queue.c: 22: return q->v[pos];
  5021  0E4C  0878               	movf	back@pos,w
  5022  0E4D  3E08               	addlw	8
  5023  0E4E  077A               	addwf	back@q,w
  5024  0E4F  00F7               	movwf	??_back
  5025  0E50  0877               	movf	??_back,w
  5026  0E51  0084               	movwf	4
  5027  0E52  1783               	bsf	3,7	;select IRP bank2
  5028  0E53  0800               	movf	0,w
  5029  0E54  0008               	return
  5030  0E55                     __end_of_back:	
  5031                           
  5032                           	psect	text31
  5033  01AA                     __ptext31:	
  5034 ;; *************** function ___awmod *****************
  5035 ;; Defined at:
  5036 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  divisor         2    0[COMMON] int 
  5039 ;;  dividend        2    2[COMMON] int 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  sign            1    6[COMMON] unsigned char 
  5042 ;;  counter         1    5[COMMON] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  2    0[COMMON] int 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5052 ;;      Params:         4       0       0       0       0
  5053 ;;      Locals:         2       0       0       0       0
  5054 ;;      Temps:          1       0       0       0       0
  5055 ;;      Totals:         7       0       0       0       0
  5056 ;;Total ram usage:        7 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;;		_push
  5063 ;;		_front
  5064 ;;		_back
  5065 ;;		_pop
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function ___awmod
  5071  01AA                     ___awmod:	
  5072                           
  5073                           ;incstack = 0
  5074                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5075  01AA  01F6               	clrf	___awmod@sign
  5076  01AB  1FF3               	btfss	___awmod@dividend+1,7
  5077  01AC  29B4               	goto	l1392
  5078  01AD  09F2               	comf	___awmod@dividend,f
  5079  01AE  09F3               	comf	___awmod@dividend+1,f
  5080  01AF  0AF2               	incf	___awmod@dividend,f
  5081  01B0  1903               	skipnz
  5082  01B1  0AF3               	incf	___awmod@dividend+1,f
  5083  01B2  01F6               	clrf	___awmod@sign
  5084  01B3  0AF6               	incf	___awmod@sign,f
  5085  01B4                     l1392:	
  5086  01B4  1FF1               	btfss	___awmod@divisor+1,7
  5087  01B5  29BB               	goto	l1396
  5088  01B6  09F0               	comf	___awmod@divisor,f
  5089  01B7  09F1               	comf	___awmod@divisor+1,f
  5090  01B8  0AF0               	incf	___awmod@divisor,f
  5091  01B9  1903               	skipnz
  5092  01BA  0AF1               	incf	___awmod@divisor+1,f
  5093  01BB                     l1396:	
  5094  01BB  0870               	movf	___awmod@divisor,w
  5095  01BC  0471               	iorwf	___awmod@divisor+1,w
  5096  01BD  1903               	btfsc	3,2
  5097  01BE  29E8               	goto	l1414
  5098  01BF  01F5               	clrf	___awmod@counter
  5099  01C0  0AF5               	incf	___awmod@counter,f
  5100  01C1                     l1404:	
  5101  01C1  1BF1               	btfsc	___awmod@divisor+1,7
  5102  01C2  29CF               	goto	l1406
  5103  01C3  3001               	movlw	1
  5104  01C4                     u1055:	
  5105  01C4  1003               	clrc
  5106  01C5  0DF0               	rlf	___awmod@divisor,f
  5107  01C6  0DF1               	rlf	___awmod@divisor+1,f
  5108  01C7  3EFF               	addlw	-1
  5109  01C8  1D03               	skipz
  5110  01C9  29C4               	goto	u1055
  5111  01CA  3001               	movlw	1
  5112  01CB  00F4               	movwf	??___awmod
  5113  01CC  0874               	movf	??___awmod,w
  5114  01CD  07F5               	addwf	___awmod@counter,f
  5115  01CE  29C1               	goto	l1404
  5116  01CF                     l1406:	
  5117  01CF  0871               	movf	___awmod@divisor+1,w
  5118  01D0  0273               	subwf	___awmod@dividend+1,w
  5119  01D1  1D03               	skipz
  5120  01D2  29D5               	goto	u1075
  5121  01D3  0870               	movf	___awmod@divisor,w
  5122  01D4  0272               	subwf	___awmod@dividend,w
  5123  01D5                     u1075:	
  5124  01D5  1C03               	skipc
  5125  01D6  29DD               	goto	l1410
  5126  01D7  0870               	movf	___awmod@divisor,w
  5127  01D8  02F2               	subwf	___awmod@dividend,f
  5128  01D9  0871               	movf	___awmod@divisor+1,w
  5129  01DA  1C03               	skipc
  5130  01DB  03F3               	decf	___awmod@dividend+1,f
  5131  01DC  02F3               	subwf	___awmod@dividend+1,f
  5132  01DD                     l1410:	
  5133  01DD  3001               	movlw	1
  5134  01DE                     u1085:	
  5135  01DE  1003               	clrc
  5136  01DF  0CF1               	rrf	___awmod@divisor+1,f
  5137  01E0  0CF0               	rrf	___awmod@divisor,f
  5138  01E1  3EFF               	addlw	-1
  5139  01E2  1D03               	skipz
  5140  01E3  29DE               	goto	u1085
  5141  01E4  3001               	movlw	1
  5142  01E5  02F5               	subwf	___awmod@counter,f
  5143  01E6  1D03               	btfss	3,2
  5144  01E7  29CF               	goto	l1406
  5145  01E8                     l1414:	
  5146  01E8  0876               	movf	___awmod@sign,w
  5147  01E9  1903               	btfsc	3,2
  5148  01EA  29F0               	goto	l1418
  5149  01EB  09F2               	comf	___awmod@dividend,f
  5150  01EC  09F3               	comf	___awmod@dividend+1,f
  5151  01ED  0AF2               	incf	___awmod@dividend,f
  5152  01EE  1903               	skipnz
  5153  01EF  0AF3               	incf	___awmod@dividend+1,f
  5154  01F0                     l1418:	
  5155  01F0  0873               	movf	___awmod@dividend+1,w
  5156  01F1  00F1               	movwf	?___awmod+1
  5157  01F2  0872               	movf	___awmod@dividend,w
  5158  01F3  00F0               	movwf	?___awmod
  5159  01F4  0008               	return
  5160  01F5                     __end_of___awmod:	
  5161                           
  5162                           	psect	text32
  5163  0EE6                     __ptext32:	
  5164 ;; *************** function _lcd_str *****************
  5165 ;; Defined at:
  5166 ;;		line 76 in file "lcd.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  str             2    2[COMMON] PTR const unsigned char 
  5169 ;;		 -> STR_5(16), STR_4(12), STR_3(10), main@field(34), 
  5170 ;;		 -> STR_2(14), STR_1(14), main@message(16), 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  i               1    5[COMMON] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      void 
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5182 ;;      Params:         2       0       0       0       0
  5183 ;;      Locals:         1       0       0       0       0
  5184 ;;      Temps:          1       0       0       0       0
  5185 ;;      Totals:         4       0       0       0       0
  5186 ;;Total ram usage:        4 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    2
  5189 ;; This function calls:
  5190 ;;		_lcd_dat
  5191 ;; This function is called by:
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _lcd_str
  5198  0EE6                     _lcd_str:	
  5199                           
  5200                           ;lcd.c: 78: unsigned char i=0;
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5204  0EE6  01F5               	clrf	lcd_str@i
  5205  0EE7                     l1606:	
  5206                           ;lcd.c: 80: while(str[i] != 0 )
  5207                           
  5208  0EE7  0875               	movf	lcd_str@i,w
  5209  0EE8  0772               	addwf	lcd_str@str,w
  5210  0EE9  0084               	movwf	4
  5211  0EEA  0873               	movf	lcd_str@str+1,w
  5212  0EEB  1803               	skipnc
  5213  0EEC  0A73               	incf	lcd_str@str+1,w
  5214  0EED  1283               	bcf	3,5	;RP0=0, select bank0
  5215  0EEE  1303               	bcf	3,6	;RP1=0, select bank0
  5216  0EEF  00FF               	movwf	127
  5217  0EF0  120A  118A  2003  120A  158A  	fcall	stringtab
  5218  0EF5  3A00               	xorlw	0
  5219  0EF6  1903               	btfsc	3,2
  5220  0EF7  0008               	return
  5221                           
  5222                           ;lcd.c: 81: {
  5223                           ;lcd.c: 82: lcd_dat(str[i]);
  5224  0EF8  0875               	movf	lcd_str@i,w
  5225  0EF9  0772               	addwf	lcd_str@str,w
  5226  0EFA  0084               	movwf	4
  5227  0EFB  0873               	movf	lcd_str@str+1,w
  5228  0EFC  1803               	skipnc
  5229  0EFD  0A73               	incf	lcd_str@str+1,w
  5230  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  5231  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  5232  0F00  00FF               	movwf	127
  5233  0F01  120A  118A  2003  120A  158A  	fcall	stringtab
  5234  0F06  120A  158A  25C8  120A  158A  	fcall	_lcd_dat
  5235                           
  5236                           ;lcd.c: 83: i++;
  5237  0F0B  3001               	movlw	1
  5238  0F0C  00F4               	movwf	??_lcd_str
  5239  0F0D  0874               	movf	??_lcd_str,w
  5240  0F0E  07F5               	addwf	lcd_str@i,f
  5241  0F0F  2EE7               	goto	l1606
  5242  0F10                     __end_of_lcd_str:	
  5243                           
  5244                           	psect	text33
  5245  0DC8                     __ptext33:	
  5246 ;; *************** function _lcd_dat *****************
  5247 ;; Defined at:
  5248 ;;		line 46 in file "lcd.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  val             1    wreg     unsigned char 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  val             1    1[COMMON] unsigned char 
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, pclath, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5262 ;;      Params:         0       0       0       0       0
  5263 ;;      Locals:         1       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0
  5265 ;;      Totals:         1       0       0       0       0
  5266 ;;Total ram usage:        1 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    1
  5269 ;; This function calls:
  5270 ;;		_lcd_wr
  5271 ;; This function is called by:
  5272 ;;		_lcd_str
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _lcd_dat
  5278  0DC8                     _lcd_dat:	
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  5282                           ;lcd_dat@val stored from wreg
  5283  0DC8  00F1               	movwf	lcd_dat@val
  5284                           
  5285                           ;lcd.c: 48: PORTEbits.RE1=1;
  5286  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  5287  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  5288  0DCB  1489               	bsf	9,1	;volatile
  5289                           
  5290                           ;lcd.c: 49: lcd_wr(val);
  5291  0DCC  0871               	movf	lcd_dat@val,w
  5292  0DCD  120A  158A  2584   	fcall	_lcd_wr
  5293                           
  5294                           ;lcd.c: 50: PORTEbits.RE2=1;
  5295  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0DD2  1509               	bsf	9,2	;volatile
  5298                           
  5299                           ;lcd.c: 52: PORTEbits.RE1=0;
  5300  0DD3  1089               	bcf	9,1	;volatile
  5301                           
  5302                           ;lcd.c: 54: PORTEbits.RE1=1;
  5303  0DD4  1489               	bsf	9,1	;volatile
  5304  0DD5  0008               	return
  5305  0DD6                     __end_of_lcd_dat:	
  5306                           
  5307                           	psect	text34
  5308  0244                     __ptext34:	
  5309 ;; *************** function _lcd_init *****************
  5310 ;; Defined at:
  5311 ;;		line 57 in file "lcd.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5325 ;;      Params:         0       0       0       0       0
  5326 ;;      Locals:         0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0
  5328 ;;      Totals:         0       0       0       0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    2
  5332 ;; This function calls:
  5333 ;;		_atraso_ms
  5334 ;;		_lcd_cmd
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _lcd_init
  5342  0244                     _lcd_init:	
  5343                           
  5344                           ;lcd.c: 59: PORTEbits.RE1=0;
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  5348  0244  1283               	bcf	3,5	;RP0=0, select bank0
  5349  0245  1303               	bcf	3,6	;RP1=0, select bank0
  5350  0246  1089               	bcf	9,1	;volatile
  5351                           
  5352                           ;lcd.c: 60: PORTEbits.RE2=0;
  5353  0247  1109               	bcf	9,2	;volatile
  5354                           
  5355                           ;lcd.c: 61: atraso_ms(20);
  5356  0248  3014               	movlw	20
  5357  0249  00F0               	movwf	atraso_ms@valor
  5358  024A  3000               	movlw	0
  5359  024B  00F1               	movwf	atraso_ms@valor+1
  5360  024C  120A  158A  2677  120A  118A  	fcall	_atraso_ms
  5361                           
  5362                           ;lcd.c: 62: PORTEbits.RE1=1;
  5363  0251  1283               	bcf	3,5	;RP0=0, select bank0
  5364  0252  1303               	bcf	3,6	;RP1=0, select bank0
  5365  0253  1489               	bsf	9,1	;volatile
  5366                           
  5367                           ;lcd.c: 64: lcd_cmd(0x38);
  5368  0254  3038               	movlw	56
  5369  0255  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5370                           
  5371                           ;lcd.c: 65: atraso_ms(5);
  5372  025A  3005               	movlw	5
  5373  025B  00F0               	movwf	atraso_ms@valor
  5374  025C  3000               	movlw	0
  5375  025D  00F1               	movwf	atraso_ms@valor+1
  5376  025E  120A  158A  2677  120A  118A  	fcall	_atraso_ms
  5377                           
  5378                           ;lcd.c: 66: lcd_cmd(0x38);
  5379  0263  3038               	movlw	56
  5380  0264  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5381                           
  5382                           ;lcd.c: 67: atraso_ms(1);
  5383  0269  3001               	movlw	1
  5384  026A  00F0               	movwf	atraso_ms@valor
  5385  026B  3000               	movlw	0
  5386  026C  00F1               	movwf	atraso_ms@valor+1
  5387  026D  120A  158A  2677  120A  118A  	fcall	_atraso_ms
  5388                           
  5389                           ;lcd.c: 68: lcd_cmd(0x38);
  5390  0272  3038               	movlw	56
  5391  0273  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5392                           
  5393                           ;lcd.c: 69: lcd_cmd(0x08);
  5394  0278  3008               	movlw	8
  5395  0279  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5396                           
  5397                           ;lcd.c: 70: lcd_cmd(0x0F);
  5398  027E  300F               	movlw	15
  5399  027F  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5400                           
  5401                           ;lcd.c: 71: lcd_cmd(0x01);
  5402  0284  3001               	movlw	1
  5403  0285  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5404                           
  5405                           ;lcd.c: 72: lcd_cmd(0x38);
  5406  028A  3038               	movlw	56
  5407  028B  120A  158A  269A  120A  118A  	fcall	_lcd_cmd
  5408                           
  5409                           ;lcd.c: 73: lcd_cmd(0x80);
  5410  0290  3080               	movlw	128
  5411  0291  120A  158A  269A   	fcall	_lcd_cmd
  5412  0294  0008               	return
  5413  0295                     __end_of_lcd_init:	
  5414                           
  5415                           	psect	text35
  5416  0E9A                     __ptext35:	
  5417 ;; *************** function _lcd_cmd *****************
  5418 ;; Defined at:
  5419 ;;		line 35 in file "lcd.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;  val             1    wreg     unsigned char 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  val             1    6[COMMON] unsigned char 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, pclath, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5433 ;;      Params:         0       0       0       0       0
  5434 ;;      Locals:         1       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0
  5436 ;;      Totals:         1       0       0       0       0
  5437 ;;Total ram usage:        1 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    1
  5440 ;; This function calls:
  5441 ;;		_atraso_ms
  5442 ;;		_lcd_wr
  5443 ;; This function is called by:
  5444 ;;		_lcd_init
  5445 ;;		_main
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           
  5450                           ;psect for function _lcd_cmd
  5451  0E9A                     _lcd_cmd:	
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  5455                           ;lcd_cmd@val stored from wreg
  5456  0E9A  00F6               	movwf	lcd_cmd@val
  5457                           
  5458                           ;lcd.c: 37: PORTEbits.RE1=1;
  5459  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  5460  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  5461  0E9D  1489               	bsf	9,1	;volatile
  5462                           
  5463                           ;lcd.c: 38: lcd_wr(val);
  5464  0E9E  0876               	movf	lcd_cmd@val,w
  5465  0E9F  120A  158A  2584  120A  158A  	fcall	_lcd_wr
  5466                           
  5467                           ;lcd.c: 39: PORTEbits.RE2=0;
  5468  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  5469  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  5470  0EA6  1109               	bcf	9,2	;volatile
  5471                           
  5472                           ;lcd.c: 40: atraso_ms(3);
  5473  0EA7  3003               	movlw	3
  5474  0EA8  00F0               	movwf	atraso_ms@valor
  5475  0EA9  3000               	movlw	0
  5476  0EAA  00F1               	movwf	atraso_ms@valor+1
  5477  0EAB  120A  158A  2677  120A  158A  	fcall	_atraso_ms
  5478                           
  5479                           ;lcd.c: 41: PORTEbits.RE1=0;
  5480  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0EB2  1089               	bcf	9,1	;volatile
  5483                           
  5484                           ;lcd.c: 42: atraso_ms(3);
  5485  0EB3  3003               	movlw	3
  5486  0EB4  00F0               	movwf	atraso_ms@valor
  5487  0EB5  3000               	movlw	0
  5488  0EB6  00F1               	movwf	atraso_ms@valor+1
  5489  0EB7  120A  158A  2677   	fcall	_atraso_ms
  5490                           
  5491                           ;lcd.c: 43: PORTEbits.RE1=1;
  5492  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  5493  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  5494  0EBC  1489               	bsf	9,1	;volatile
  5495  0EBD  0008               	return
  5496  0EBE                     __end_of_lcd_cmd:	
  5497                           
  5498                           	psect	text36
  5499  0D84                     __ptext36:	
  5500 ;; *************** function _lcd_wr *****************
  5501 ;; Defined at:
  5502 ;;		line 30 in file "lcd.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  val             1    wreg     unsigned char 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  val             1    0[COMMON] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5516 ;;      Params:         0       0       0       0       0
  5517 ;;      Locals:         1       0       0       0       0
  5518 ;;      Temps:          0       0       0       0       0
  5519 ;;      Totals:         1       0       0       0       0
  5520 ;;Total ram usage:        1 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_lcd_cmd
  5526 ;;		_lcd_dat
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _lcd_wr
  5532  0D84                     _lcd_wr:	
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _lcd_wr: [wreg]
  5536                           ;lcd_wr@val stored from wreg
  5537  0D84  00F0               	movwf	lcd_wr@val
  5538                           
  5539                           ;lcd.c: 32: PORTD=val;
  5540  0D85  0870               	movf	lcd_wr@val,w
  5541  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  5542  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  5543  0D88  0088               	movwf	8	;volatile
  5544  0D89  0008               	return
  5545  0D8A                     __end_of_lcd_wr:	
  5546                           
  5547                           	psect	text37
  5548  0E77                     __ptext37:	
  5549 ;; *************** function _atraso_ms *****************
  5550 ;; Defined at:
  5551 ;;		line 26 in file "atraso.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  valor           2    0[COMMON] unsigned int 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  i               2    3[COMMON] unsigned int 
  5556 ;;  j               1    5[COMMON] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5566 ;;      Params:         2       0       0       0       0
  5567 ;;      Locals:         3       0       0       0       0
  5568 ;;      Temps:          1       0       0       0       0
  5569 ;;      Totals:         6       0       0       0       0
  5570 ;;Total ram usage:        6 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_lcd_cmd
  5576 ;;		_lcd_init
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           
  5581                           ;psect for function _atraso_ms
  5582  0E77                     _atraso_ms:	
  5583                           
  5584                           ;atraso.c: 28: unsigned int i;
  5585                           ;atraso.c: 29: unsigned char j;
  5586                           ;atraso.c: 31: for (i =0; i< valor; i++)
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _atraso_ms: [wreg+status,2+status,0]
  5590  0E77  01F3               	clrf	atraso_ms@i
  5591  0E78  01F4               	clrf	atraso_ms@i+1
  5592  0E79                     l3:	
  5593  0E79  0871               	movf	atraso_ms@valor+1,w
  5594  0E7A  0274               	subwf	atraso_ms@i+1,w
  5595  0E7B  1D03               	skipz
  5596  0E7C  2E7F               	goto	u1135
  5597  0E7D  0870               	movf	atraso_ms@valor,w
  5598  0E7E  0273               	subwf	atraso_ms@i,w
  5599  0E7F                     u1135:	
  5600  0E7F  1803               	btfsc	3,0
  5601  0E80  0008               	return
  5602                           
  5603                           ;atraso.c: 32: {
  5604                           ;atraso.c: 34: for (j =0 ; j < 200; j++)
  5605  0E81  01F5               	clrf	atraso_ms@j
  5606  0E82  30C8               	movlw	200
  5607  0E83  0275               	subwf	atraso_ms@j,w
  5608  0E84  1803               	btfsc	3,0
  5609  0E85  2E93               	goto	l1434
  5610  0E86                     l5:	
  5611  0E86  0000               	nop	;# 
  5612  0E87  0000               	nop	;# 
  5613  0E88  0000               	nop	;# 
  5614  0E89  0000               	nop	;# 
  5615  0E8A  0000               	nop	;# 
  5616  0E8B  3001               	movlw	1
  5617  0E8C  00F2               	movwf	??_atraso_ms
  5618  0E8D  0872               	movf	??_atraso_ms,w
  5619  0E8E  07F5               	addwf	atraso_ms@j,f
  5620  0E8F  30C8               	movlw	200
  5621  0E90  0275               	subwf	atraso_ms@j,w
  5622  0E91  1C03               	skipc
  5623  0E92  2E86               	goto	l5
  5624  0E93                     l1434:	
  5625  0E93  3001               	movlw	1
  5626  0E94  07F3               	addwf	atraso_ms@i,f
  5627  0E95  1803               	skipnc
  5628  0E96  0AF4               	incf	atraso_ms@i+1,f
  5629  0E97  3000               	movlw	0
  5630  0E98  07F4               	addwf	atraso_ms@i+1,f
  5631  0E99  2E79               	goto	l3
  5632  0E9A                     __end_of_atraso_ms:	
  5633                           
  5634                           	psect	text38
  5635  0E55                     __ptext38:	
  5636 ;; *************** function _end *****************
  5637 ;; Defined at:
  5638 ;;		line 32 in file "snake.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  s               1    wreg     PTR struct .
  5641 ;;		 -> main@s(74), 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  s               1    3[BANK0 ] PTR struct .
  5644 ;;		 -> main@s(74), 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  2   11[COMMON] int 
  5647 ;; Registers used:
  5648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5654 ;;      Params:         2       0       0       0       0
  5655 ;;      Locals:         0       2       0       0       0
  5656 ;;      Temps:          0       2       0       0       0
  5657 ;;      Totals:         2       4       0       0       0
  5658 ;;Total ram usage:        6 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    1
  5661 ;; This function calls:
  5662 ;;		_won
  5663 ;; This function is called by:
  5664 ;;		_main
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _end
  5670  0E55                     _end:	
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _end: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5674                           ;end@s stored from wreg
  5675  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0E57  00A3               	movwf	end@s
  5678                           
  5679                           ;snake.c: 33: return won(s) || s->fail;
  5680  0E58  01A2               	clrf	_end$329
  5681  0E59  0AA2               	incf	_end$329,f
  5682  0E5A  0823               	movf	end@s,w
  5683  0E5B  120A  158A  2710  120A  158A  	fcall	_won
  5684  0E60  0870               	movf	?_won,w
  5685  0E61  0471               	iorwf	?_won+1,w
  5686  0E62  1D03               	btfss	3,2
  5687  0E63  2E6D               	goto	l1718
  5688  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  5690  0E66  0823               	movf	end@s,w
  5691  0E67  3E49               	addlw	73
  5692  0E68  0084               	movwf	4
  5693  0E69  1783               	bsf	3,7	;select IRP bank2
  5694  0E6A  0800               	movf	0,w
  5695  0E6B  1903               	btfsc	3,2
  5696  0E6C  01A2               	clrf	_end$329
  5697  0E6D                     l1718:	
  5698  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  5699  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  5700  0E6F  0822               	movf	_end$329,w
  5701  0E70  00A0               	movwf	??_end
  5702  0E71  01A1               	clrf	??_end+1
  5703  0E72  0820               	movf	??_end,w
  5704  0E73  00FB               	movwf	?_end
  5705  0E74  0821               	movf	??_end+1,w
  5706  0E75  00FC               	movwf	?_end+1
  5707  0E76  0008               	return
  5708  0E77                     __end_of_end:	
  5709                           
  5710                           	psect	text39
  5711  0F10                     __ptext39:	
  5712 ;; *************** function _won *****************
  5713 ;; Defined at:
  5714 ;;		line 28 in file "snake.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  s               1    wreg     PTR struct .
  5717 ;;		 -> main@s(74), 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  s               1   10[COMMON] PTR struct .
  5720 ;;		 -> main@s(74), 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  2    0[COMMON] int 
  5723 ;; Registers used:
  5724 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5730 ;;      Params:         2       0       0       0       0
  5731 ;;      Locals:         1       0       0       0       0
  5732 ;;      Temps:          8       0       0       0       0
  5733 ;;      Totals:        11       0       0       0       0
  5734 ;;Total ram usage:       11 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_main
  5740 ;;		_end
  5741 ;;		_move
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           
  5746                           ;psect for function _won
  5747  0F10                     _won:	
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in _won: [wreg-fsr0h+status,2+status,0]
  5751                           ;won@s stored from wreg
  5752  0F10  00FA               	movwf	won@s
  5753                           
  5754                           ;snake.c: 29: return s->q.size == (s->q.capacity - 1);
  5755  0F11  087A               	movf	won@s,w
  5756  0F12  3E22               	addlw	34
  5757  0F13  0084               	movwf	4
  5758  0F14  1783               	bsf	3,7	;select IRP bank2
  5759  0F15  0800               	movf	0,w
  5760  0F16  00F2               	movwf	??_won
  5761  0F17  0A84               	incf	4,f
  5762  0F18  0800               	movf	0,w
  5763  0F19  00F3               	movwf	??_won+1
  5764  0F1A  087A               	movf	won@s,w
  5765  0F1B  3E20               	addlw	32
  5766  0F1C  0084               	movwf	4
  5767  0F1D  0800               	movf	0,w
  5768  0F1E  00F4               	movwf	??_won+2
  5769  0F1F  0A84               	incf	4,f
  5770  0F20  0800               	movf	0,w
  5771  0F21  00F5               	movwf	??_won+3
  5772  0F22  0874               	movf	??_won+2,w
  5773  0F23  3EFF               	addlw	255
  5774  0F24  00F6               	movwf	??_won+4
  5775  0F25  0875               	movf	??_won+3,w
  5776  0F26  1803               	skipnc
  5777  0F27  3E01               	addlw	1
  5778  0F28  3EFF               	addlw	255
  5779  0F29  00F7               	movwf	??_won+5
  5780  0F2A  0873               	movf	??_won+1,w
  5781  0F2B  0677               	xorwf	??_won+5,w
  5782  0F2C  1D03               	skipz
  5783  0F2D  2F30               	goto	u1195
  5784  0F2E  0872               	movf	??_won,w
  5785  0F2F  0676               	xorwf	??_won+4,w
  5786  0F30                     u1195:	
  5787  0F30  1D03               	btfss	3,2
  5788  0F31  2F34               	goto	u1190
  5789  0F32  3001               	movlw	1
  5790  0F33  2F35               	goto	u1200
  5791  0F34                     u1190:	
  5792  0F34  3000               	movlw	0
  5793  0F35                     u1200:	
  5794  0F35  00F8               	movwf	??_won+6
  5795  0F36  01F9               	clrf	??_won+7
  5796  0F37  0878               	movf	??_won+6,w
  5797  0F38  00F0               	movwf	?_won
  5798  0F39  0879               	movf	??_won+7,w
  5799  0F3A  00F1               	movwf	?_won+1
  5800  0F3B  0008               	return
  5801  0F3C                     __end_of_won:	
  5802  007E                     btemp	set	126	;btemp
  5803  007E                     wtemp0	set	126


Data Sizes:
    Strings     66
    Constant    0
    Data        20
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     53      77
    BANK1            80     34      50
    BANK3            96     74      74
    BANK2            96      0       0

Pointer List with Targets:

    points@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    makeFood@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    move@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    print@field	PTR unsigned char [17] size(1) Largest target is 34
		 -> main@field(BANK1[34]), 

    print@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    end@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    won@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    startSnake@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    isFood@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    isSet@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    set@s	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    pop@q	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    back@q	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    front@q	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    push@q	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    startQueue@q	PTR struct . size(1) Largest target is 74
		 -> main@s(BANK3[74]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_5(CODE[16]), STR_4(CODE[12]), STR_3(CODE[10]), main@field(BANK1[34]), 
		 -> STR_2(CODE[14]), STR_1(CODE[14]), main@message(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_print
    _startSnake->_set
    _startSnake->_srand
    _srand->_getRandon
    _getRandon->_rtc_r
    _rtc_r->_i2c_rb
    _print->_front
    _move->_increment
    _move->_isFood
    _move->_isSet
    _move->_set
    _set->_push
    _push->___awmod
    _pop->___awmod
    _makeFood->_isSet
    _rand->___lmul
    _isSet->_getI
    _isFood->_getI
    _increment->_getI
    _getI->___awdiv
    _front->___awmod
    _back->___awmod
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _end->_won

Critical Paths under _main in BANK0

    _main->_move
    _main->_startSnake
    _startSnake->_makeFood
    _srand->_getRandon
    _print->_front
    _move->_makeFood
    _makeFood->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   24180
                                             24 BANK0     29    29      0
                                              0 BANK1     34    34      0
                                              0 BANK3     74    74      0
                            ___awdiv
                            ___awmod
                                _end
                            _lcd_cmd
                           _lcd_init
                            _lcd_str
                               _move
                             _points
                              _print
                         _startSnake
                                _won
 ---------------------------------------------------------------------------------
 (1) _startSnake                                           8     8      0    5329
                                             16 BANK0      8     8      0
                          _getRandon
                           _makeFood
                            _newPair
                                _set
                              _srand
                         _startQueue
 ---------------------------------------------------------------------------------
 (2) _startQueue                                           1     1      0     118
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      86
                                             12 COMMON     2     0      2
                          _getRandon (ARG)
 ---------------------------------------------------------------------------------
 (2) _getRandon                                            9     7      2     632
                                              7 COMMON     5     3      2
                                              0 BANK0      4     4      0
                              _rtc_r
 ---------------------------------------------------------------------------------
 (3) _rtc_r                                                2     2      0     518
                                              5 COMMON     2     2      0
                               _getd
                               _getu
                             _i2c_rb
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (4) _i2c_wb                                               4     4      0      90
                                              0 COMMON     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _i2c_rb                                               5     5      0     114
                                              0 COMMON     5     5      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _getu                                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getd                                                 2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _print                                               10     9      1    2278
                                             13 COMMON     1     0      1
                                              3 BANK0      9     9      0
                              _front
                            _newPair
 ---------------------------------------------------------------------------------
 (1) _points                                               4     1      3      52
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _move                                                 8     7      1   11911
                                             16 BANK0      8     7      1
                               _back
                              _front
                               _getI
                               _getJ
                          _increment
                             _isFood
                              _isSet
                           _makeFood
                                _pop
                                _set
                                _won
 ---------------------------------------------------------------------------------
 (2) _set                                                  5     4      1    2349
                                             13 COMMON     1     0      1
                                              0 BANK0      4     4      0
                               _getI
                               _getJ
                            _newPair (ARG)
                               _push
 ---------------------------------------------------------------------------------
 (3) _push                                                 6     5      1    1357
                                              7 COMMON     6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _pop                                                  3     3      0    1182
                                              7 COMMON     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _makeFood                                             9     9      0    1568
                                              7 BANK0      9     9      0
                              _isSet
                            _newPair
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     220
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     220
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (3) _isSet                                                8     6      2     854
                                             12 COMMON     2     0      2
                                              0 BANK0      6     6      0
                               _getI
                               _getJ
                            _newPair (ARG)
 ---------------------------------------------------------------------------------
 (2) _isFood                                               8     6      2     760
                                             12 COMMON     2     0      2
                                              0 BANK0      6     6      0
                               _getI
                               _getJ
 ---------------------------------------------------------------------------------
 (2) _increment                                            6     4      2    1418
                                             12 COMMON     2     0      2
                                              0 BANK0      4     4      0
                               _getI
                               _getJ
                            _newPair
 ---------------------------------------------------------------------------------
 (2) _newPair                                              3     2      1     300
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getJ                                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getI                                                 3     3      0     578
                                              9 COMMON     3     3      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _front                                                9     9      0    1235
                                              7 COMMON     6     6      0
                                              0 BANK0      3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _back                                                 4     4      0    1183
                                              7 COMMON     4     4      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1064
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              4     2      2     774
                                              2 COMMON     4     2      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0      44
                                              1 COMMON     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     868
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     456
                                              6 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            6     4      2     412
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _end                                                  6     4      2     232
                                             11 COMMON     2     0      2
                                              0 BANK0      4     4      0
                                _won
 ---------------------------------------------------------------------------------
 (1) _won                                                 11     9      2     134
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _end
     _won
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat
       _lcd_wr
   _move
     _back
       ___awmod
     _front
       ___awmod
     _getI
       ___awdiv
     _getJ
     _increment
       _getI
         ___awdiv
       _getJ
       _newPair
     _isFood
       _getI
         ___awdiv
       _getJ
     _isSet
       _getI
         ___awdiv
       _getJ
       _newPair (ARG)
     _makeFood
       _isSet
         _getI
           ___awdiv
         _getJ
         _newPair (ARG)
       _newPair
       _rand
         ___lmul
     _pop
       ___awmod
     _set
       _getI
         ___awdiv
       _getJ
       _newPair (ARG)
       _push (ARG)
         ___awmod
     _won
   _points
   _print
     _front
       ___awmod
     _newPair
   _startSnake
     _getRandon
       _rtc_r
         _getd
         _getu
         _i2c_rb
           _delay
         _i2c_start
           _delay
         _i2c_stop
           _delay
         _i2c_wb
           _delay
     _makeFood
       _isSet
         _getI
           ___awdiv
         _getJ
         _newPair (ARG)
       _newPair
       _rand
         ___lmul
     _newPair
     _set
       _getI
         ___awdiv
       _getJ
       _newPair (ARG)
       _push (ARG)
         ___awmod
     _srand
       _getRandon (ARG)
         _rtc_r
           _getd
           _getu
           _i2c_rb
             _delay
           _i2c_start
             _delay
           _i2c_stop
             _delay
           _i2c_wb
             _delay
     _startQueue
   _won

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     4A      4A      10       77.1%
BITBANK3            60      0       0       9        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      12        0.0%
BITBANK2            60      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      32       8       62.5%
BITBANK1            50      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D7       6        0.0%
ABS                  0      0      D7       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Jan 22 20:23:53 2017

                      l3 0E79                        l5 0E86                        pc 0002  
            __CFG_CP$OFF 0000                       l69 06C2                       l86 07D6  
           ___awdiv@sign 0076                       fsr 0004                      l252 010F  
                    l256 0205                      l257 0227                      l258 0231  
                    l199 02E9                      u825 0358                      u914 00F2  
                    u915 00F0                      u845 0364                      u855 0370  
                    u944 0217                      u865 037A                      u945 0215  
                    u895 0DBF                      u995 00C1                      _end 0E55  
                    _set 0F3C                      _pop 0FCC                      fsr0 0004  
                    _won 0F10                      indf 0000             __CFG_BORV$20 0000  
           ___awmod@sign 0076             __CFG_FOSC$HS 0000                     l1310 00E9  
                   l1410 01DD                     l1250 034D                     l1404 01C1  
                   l1260 0355                     l1244 0342                     l1406 01CF  
                   l1414 01E8                     l1262 0363                     l1272 0384  
                   l1434 0E93                     l1418 01F0                     l1354 0234  
                   l1276 038C                     l1268 0379                     l1372 00A9  
                   l1606 0EE7                     l1630 047A                     l1392 01B4  
                   l1376 00BF                     l1624 0454                     l1800 077E  
                   l1706 0559                     l1634 048D                     l1618 0445  
                   l1396 01BB                     l1660 03C7                     ?_end 007B  
                   l1718 0E6D                     l1662 03C9                     l1654 03B2  
                   l1582 015C                     l1592 031F                     l1680 04BD  
                   l1656 03B6                     l1672 0409                     l1576 0135  
                   l1752 06C6                     l1682 04CD                     l1690 04E2  
                   l1762 0706                     l1684 04D1                     l1692 04ED  
                   l1668 03D8                     l1772 0743                     l1686 04DD  
                   l1792 0757                     l1776 074C                     l1768 073C  
                   l1698 0514                     ?_set 007D                     ?_pop 0070  
                   STR_1 0031                     STR_2 0023                     STR_3 004B  
                   STR_4 003F                     STR_5 0013                     ?_won 0070  
                   u1005 00C9                     u1200 0F35                     u1230 0FC4  
                   u1135 0E7F                     u1055 01C4                     u1215 0F49  
                   u1240 0FC5                     u1160 0F93                     u1145 0DB3  
                   u1225 0FA8                     u1305 0443                     u1170 0F94  
                   u1075 01D5                     u1155 0F78                     u1315 0452  
                   u1085 01DE                     u1325 0459                     u1190 0F34  
                   u1255 0133                     u1335 0478                     u1185 019C  
                   u1265 015A                     u1345 048B                     u1195 0F30  
                   u1355 03AB                     u1285 0326                     u1445 0539  
                   u1480 0681                     u1385 03EE                     u1395 03E7  
            main@message 0041                     _back 0E34                     _date 0055  
                   _getI 0DF6                     _getJ 0D77                     _getd 0DBB  
                   _getu 0D7F                     _main 0677                     end@s 0023  
                   _rand 0163                     _move 04AD                     _time 005F  
                   _push 0295                     btemp 007E                     set@p 007D  
                   set@s 0023                     pop@q 0079                     won@s 007A  
                   start 0000            __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000  
                  ??_end 0020                    ??_set 0020                    ??_pop 0077  
                  ??_won 0072                    ?_back 0070                    ?_getI 0070  
                  ?_getJ 0070                    ?_getd 0070                    ?_getu 0070  
                  ?_main 0070                    ?_rand 0020          __end_of___awdiv 0391  
                  ?_move 0030            __CFG_WDTE$OFF 0000          __end_of___awmod 01F5  
                  ?_push 0077          ___awdiv@divisor 0070          ___awdiv@counter 0075  
                  _PORTD 0008                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
    ___lmul@multiplicand 0074           __CFG_FCMEN$OFF 0000          __end_of_lcd_dat 0DD6  
        __end_of_lcd_cmd 0EBE          __end_of_lcd_str 0F10                    back@q 007A  
                  _delay 0D92                    _isSet 0F6B          __end_of_newPair 0DBB  
                  _front 0065                    getI@p 007B                    getJ@p 0070  
                  _randx 0069                    _rtc_r 0578                    _srand 0D9B  
                  _print 0391                    main@s 0190           __CFG_BOREN$OFF 0000  
                  pclath 000A                    move@s 0037                    push@q 007C  
                  push@x 0077                    status 0003                    wtemp0 007E  
        __initialization 07DB             __end_of_back 0E55             __end_of_getI 0E07  
           __end_of_getJ 0D7B             __end_of_getd 0DC8             __end_of_getu 0D84  
           __end_of_main 07DB             __end_of_rand 01AA             __end_of_move 0578  
           __end_of_push 02E6         __end_of_i2c_stop 0DF6                   ??_back 0077  
                 ??_getI 0079                   ??_getJ 0070                   ??_getd 0070  
                 ??_getu 0070                   ??_main 0038                   ??_rand 0022  
                 ??_move 0031                   ??_push 0078            main@direction 0053  
        __CFG_CCP2MX$RC1 0000                   ?_delay 0070                   _ADCON1 009F  
                 ?_isSet 007C                   ?_front 0070         ___awdiv@dividend 0072  
                 ?_rtc_r 0070                   ?_print 007D                   ?_srand 007C  
     __size_of_i2c_start 0010           __CFG_PWRTE$OFF 0000                   _i2c_rb 01F5  
                 _i2c_wb 00E0         __end_of_lcd_init 0295         __end_of_makeFood 0338  
                 ___lmul 00A1                ??___awdiv 0074                ??___awmod 0074  
                 _isFood 0F9B                   _lcd_wr 0D84         ___awdiv@quotient 0077  
        ___awmod@divisor 0070                   getd@nn 0071                   _points 0DA4  
        ___awmod@counter 0075                ??_lcd_dat 0071                   getu@nn 0070  
              ??_lcd_cmd 0076                   isSet@p 007C                   isSet@s 0025  
              ??_lcd_str 0074                   front@q 0022                ??_newPair 0071  
                 print@i 002A                   print@j 0028                   print@s 0027  
                 srand@x 007C          __CFG_BORSEN$OFF 0000  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0D7B             __pidataBANK1 0055  
          __end_of_delay 0D9B            __end_of_isSet 0F9B            __end_of_front 00A1  
          __end_of_rtc_r 0677            __end_of_print 041C            __end_of_srand 0DA4  
      __end_of_i2c_start 0DE6       __size_of_getRandon 0044                  ??_delay 0070  
                ??_isSet 0020                  ??_front 0077                  ??_rtc_r 0075  
                ??_print 0023                  ??_srand 007E       __size_of_atraso_ms 0023  
             __pbssBANK0 0055                ?_i2c_stop 0070       __size_of_increment 0028  
                ?_i2c_rb 0070                  ?_i2c_wb 0070               __pmaintext 0677  
                ?___lmul 0070                  ?_isFood 007C                  ?_lcd_wr 0070  
         ___lmul@product 0079                  ?_points 0070         move@lastPosition 0035  
              ?_lcd_init 0070                ?_makeFood 0070               __stringtab 0003  
                i2c_rb@i 0074                  i2c_wb@i 0073               ??_i2c_stop 0070  
      __end_of_getRandon 0163            move@direction 0030          __size_of_i2c_rb 004F  
        __size_of_i2c_wb 003F                  _end$329 0022                  ___awdiv 0338  
        __size_of___lmul 003F                  ___awmod 01AA        __end_of_atraso_ms 0E9A  
        __size_of_isFood 0031          __size_of_lcd_wr 0006                  back@pos 0078  
                __ptext1 041C                  __ptext2 0E18                  __ptext3 0D9B  
                __ptext4 011F                  __ptext5 0578                  __ptext6 00E0  
                __ptext7 0DE6                  __ptext8 0DD6                  __ptext9 01F5  
        __size_of_points 000B                  _lcd_dat 0DC8                  _lcd_cmd 0E9A  
                _lcd_str 0EE6        __end_of_increment 0EE6                  _newPair 0DAF  
           __size_of_end 0022             __size_of_set 002F             __size_of_pop 0034  
           __size_of_won 002C         ___awmod@dividend 0072                  isFood@p 007C  
                isFood@s 0025                  clrloop0 0D8B                  main@pts 0051  
             ??_lcd_init 0077               ??_makeFood 0027     end_of_initialization 07FC  
                points@s 0073                  push@pos 007A               getRandon@i 0022  
             getRandon@x 0020                _PORTBbits 0006                _PORTCbits 0007  
              _PORTEbits 0009                _TRISCbits 0087               lcd_dat@val 0071  
             lcd_cmd@val 0076               _startSnake 041C               _startQueue 0E18  
              i2c_rb@ack 0072                i2c_rb@ret 0073                i2c_wb@val 0072  
             lcd_str@str 0072           __end_of_i2c_rb 0244           __end_of_i2c_wb 011F  
             atraso_ms@i 0073               atraso_ms@j 0075           __end_of___lmul 00E0  
         __end_of_isFood 0FCC           __end_of_lcd_wr 0D8A           __end_of_points 0DAF  
    start_initialization 07DB              __end_of_end 0E77                _i2c_start 0DD6  
            __end_of_set 0F6B              __end_of_pop 1000              __end_of_won 0F3C  
             increment@i 007C               increment@j 007D               increment@p 0023  
      __size_of_i2c_stop 0010                 ??_i2c_rb 0070                 ??_i2c_wb 0070  
            startSnake@i 0033              startSnake@j 0035              startSnake@s 0037  
               ??___lmul 0078               init_fetch0 0E07              startQueue@q 0070  
               ??_isFood 0020                 ??_lcd_wr 0070              __pdataBANK0 0069  
            __pdataBANK1 00C2                 ??_points 0073                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0            __pcstackBANK3 0190  
             ?_i2c_start 0070              ?_startSnake 0070              ?_startQueue 0070  
      __size_of_lcd_init 0051        __size_of_makeFood 0052                 ?___awdiv 0070  
              _getRandon 011F                 ?___awmod 0070                __pstrings 0003  
               ?_lcd_dat 0070                 ?_lcd_cmd 0070                 ?_lcd_str 0072  
              _atraso_ms 0E77                 ?_newPair 0070                _increment 0EBE  
          increment@sumI 0021            increment@sumJ 0022           __size_of_delay 0009  
         __size_of_isSet 0030           __size_of_front 003C           __size_of_rtc_r 00FF  
         __size_of_print 008B           __size_of_srand 0009           atraso_ms@valor 0070  
        move@newPosition 0036                clear_ram0 0D8A                main@F1498 00C2  
             ?_getRandon 0077      __size_of_startSnake 0091      __size_of_startQueue 001C  
             print@field 007D              __stringbase 0012               ?_atraso_ms 0070  
              makeFood@i 002B                makeFood@j 002D                makeFood@s 002F  
              main@field 00A0                lcd_wr@val 0070               ?_increment 007C  
            ??_i2c_start 0070        ___lmul@multiplier 0070                 _i2c_stop 0DE6  
       __size_of___awdiv 0059         __size_of___awmod 004B       __end_of__stringtab 0013  
       __size_of_lcd_dat 000E         __size_of_lcd_cmd 0024         __size_of_lcd_str 002A  
       __size_of_newPair 000C                 __ptext10 0D92                 __ptext11 0D7F  
               __ptext20 0163                 __ptext12 0DBB                 __ptext21 00A1  
               __ptext13 0391                 __ptext30 0E34                 __ptext22 0F6B  
               __ptext14 0DA4                 __ptext31 01AA                 __ptext23 0F9B  
               __ptext15 04AD                 __ptext32 0EE6                 __ptext24 0EBE  
               __ptext16 0F3C                 __ptext33 0DC8                 __ptext25 0DAF  
               __ptext17 0295                 __ptext34 0244                 __ptext26 0D77  
               __ptext18 0FCC                 __ptext35 0E9A                 __ptext27 0DF6  
               __ptext19 02E6                 __ptext36 0D84                 __ptext28 0338  
               __ptext37 0E77                 __ptext29 0065                 __ptext38 0E55  
               __ptext39 0F10                 _lcd_init 0244                 _makeFood 02E6  
          __size_of_back 0021            __size_of_getI 0011            __size_of_getJ 0004  
          __size_of_getd 000D            __size_of_getu 0005            __size_of_main 0164  
          __size_of_rand 0047            __size_of_move 00CB            __size_of_push 0051  
            ??_getRandon 0079                print@head 0026                 lcd_str@i 0075  
            ??_atraso_ms 0072                 newPair@i 0072                 newPair@j 0070  
            ??_increment 0020                 init_ram0 0E0B                 front@pos 0020  
           ??_startSnake 0030             ??_startQueue 0070                 move@head 0034  
              stringcode 000D                 rtc_r@tmp 0076       __end_of_startSnake 04AD  
     __end_of_startQueue 0E34                 stringdir 000D                 stringtab 0003  
